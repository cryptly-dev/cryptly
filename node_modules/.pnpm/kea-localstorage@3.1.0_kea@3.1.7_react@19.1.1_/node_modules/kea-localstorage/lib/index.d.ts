import { KeaPlugin, Logic, ReducerActions, ReducerDefault, LogicBuilder } from 'kea';
export interface LocalStoragePluginOptions {
    prefix: string;
    separator: string;
    storageEngine: Storage | undefined;
}
export declare type PersistenceOptions = {
    persist?: true;
    prefix?: string;
    separator?: string;
    storageKey?: string;
};
export declare type PersistentReducerDefinitions<L extends Logic> = {
    [K in keyof L['reducers']]?: [
        ReducerDefault<L['reducers'][K], L['props']>,
        PersistenceOptions,
        ReducerActions<L, ReturnType<L['reducers'][K]>>
    ] | [ReducerDefault<L['reducers'][K], L['props']>, ReducerActions<L, ReturnType<L['reducers'][K]>>] | [ReducerDefault<L['reducers'][K], L['props']>] | ReducerActions<L, ReturnType<L['reducers'][K]>>;
};
export declare const localStoragePlugin: (pluginOptions?: Partial<LocalStoragePluginOptions>) => KeaPlugin;
export declare function persistReducer<L extends Logic>(key: keyof L['reducers']): LogicBuilder<L>;
export declare function persistentReducers<L extends Logic = Logic>(input: PersistentReducerDefinitions<L> | ((logic: L) => PersistentReducerDefinitions<L>)): LogicBuilder<L>;
