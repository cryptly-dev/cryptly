"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var kea_1 = require("kea");
var index_1 = require("../index");
describe('localstorage', function () {
    test('can save to storage with reducer options', function () {
        var storageEngine = {};
        kea_1.resetContext({
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine })],
        });
        var logicWithStorage = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            kea_1.reducers({
                number: [
                    12,
                    { persist: true },
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
        ]);
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBeDefined();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBe(storageEngine);
        expect(storageEngine['scenes.persist.index.number']).not.toBeDefined();
        expect(kea_1.getContext().plugins.activated.map(function (p) { return p.name; })).toEqual(['core', 'localStorage']);
        var unmount1 = logicWithStorage.mount();
        expect(logicWithStorage.reducerOptions).toEqual({ number: { persist: true } });
        expect(logicWithStorage.cache.localStorageDefaults.number).toBe(12);
        expect(logicWithStorage.values.number).toBe(12);
        logicWithStorage.actions.setNumber(42);
        expect(logicWithStorage.cache.localStorageDefaults.number).toBe(12);
        expect(logicWithStorage.values.number).toBe(42);
        unmount1();
        kea_1.resetContext({
            createStore: true,
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine })],
        });
        var anotherLogicWithStorage = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            index_1.persistentReducers({
                number: [
                    12,
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
        ]);
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBeDefined();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBe(storageEngine);
        expect(storageEngine['scenes.persist.index.number']).toBeDefined();
        expect(kea_1.getContext().plugins.activated.map(function (p) { return p.name; })).toEqual(['core', 'localStorage']);
        var unmount2 = anotherLogicWithStorage.mount();
        expect(anotherLogicWithStorage.cache.localStorageDefaults.number).toBe(12);
        expect(anotherLogicWithStorage.values.number).toBe(42);
        unmount2();
    });
    test('can save to storage with logic builders', function () {
        var storageEngine = {};
        kea_1.resetContext({
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine })],
        });
        var logicWithStorage = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            kea_1.reducers({
                number: [
                    12,
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
            index_1.persistReducer('number'),
        ]);
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBeDefined();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBe(storageEngine);
        expect(storageEngine['scenes.persist.index.number']).not.toBeDefined();
        expect(kea_1.getContext().plugins.activated.map(function (p) { return p.name; })).toEqual(['core', 'localStorage']);
        var unmount1 = logicWithStorage.mount();
        expect(logicWithStorage.cache.localStorageDefaults.number).toBe(12);
        expect(logicWithStorage.values.number).toBe(12);
        logicWithStorage.actions.setNumber(42);
        expect(logicWithStorage.cache.localStorageDefaults.number).toBe(12);
        expect(logicWithStorage.values.number).toBe(42);
        unmount1();
        kea_1.resetContext({
            createStore: true,
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine })],
        });
        var anotherLogicWithStorage = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            index_1.persistentReducers({
                number: [
                    12,
                    { persist: true },
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
        ]);
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBeDefined();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBe(storageEngine);
        expect(storageEngine['scenes.persist.index.number']).toBeDefined();
        expect(kea_1.getContext().plugins.activated.map(function (p) { return p.name; })).toEqual(['core', 'localStorage']);
        var unmount2 = anotherLogicWithStorage.mount();
        expect(anotherLogicWithStorage.cache.localStorageDefaults.number).toBe(12);
        expect(anotherLogicWithStorage.values.number).toBe(42);
        unmount2();
    });
    test('prefix and separator work', function () {
        var storageEngine = {
            items: {},
            setItem: function (key, value) {
                this.items[key] = value;
            },
            removeItem: function (key) {
                delete this.items[key];
            },
        };
        kea_1.resetContext({
            createStore: true,
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine, prefix: 'something', separator: '_' })],
        });
        var logicWithStorage = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            index_1.persistentReducers({
                number: [
                    12,
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
                override: [
                    22,
                    { prefix: 'nope', separator: '|' },
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
        ]);
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBeDefined();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBe(storageEngine);
        logicWithStorage.mount();
        logicWithStorage.actions.setNumber(55);
        var _a = logicWithStorage.values, number = _a.number, override = _a.override;
        expect(number).toBe(55);
        expect(override).toBe(55);
        expect(storageEngine['something_scenes_persist_index_number']).toBe('55');
        expect(storageEngine['nope|scenes|persist|index|override']).toBe('55');
    });
    test('works with extended logic', function () {
        var storageEngine = {};
        kea_1.resetContext({
            createStore: true,
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine })],
        });
        var logic = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            index_1.persistentReducers({
                number: [
                    12,
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
        ]);
        logic.extend([
            index_1.persistentReducers({
                otherNumber: [
                    12,
                    { persist: true },
                    {
                        setNumber: function (_, payload) { return payload.number; },
                    },
                ],
            }),
        ]);
        logic.mount();
        logic.actions.setNumber(55);
        var _a = logic.values, number = _a.number, otherNumber = _a.otherNumber;
        expect(number).toBe(55);
        expect(otherNumber).toBe(55);
        expect(storageEngine['scenes.persist.index.number']).toBe('55');
        expect(storageEngine['scenes.persist.index.otherNumber']).toBe('55');
    });
    test('can set persistence key', function () {
        var storageEngine = {};
        kea_1.resetContext({
            createStore: true,
            plugins: [index_1.localStoragePlugin({ storageEngine: storageEngine })],
        });
        var anotherLogicWithStorage = kea_1.kea([
            kea_1.path(['scenes', 'persist', 'index']),
            kea_1.props({}),
            kea_1.actions({
                setNumber: function (number) { return ({ number: number }); },
            }),
            kea_1.reducers(function (_a) {
                var props = _a.props;
                return ({
                    number: [
                        12,
                        { persist: true, storageKey: "global.storageKey." + props.persistKey },
                        {
                            setNumber: function (_, payload) { return payload.number; },
                        },
                    ],
                });
            }),
        ]);
        anotherLogicWithStorage({ persistKey: 'banana' }).mount();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBeDefined();
        expect(kea_1.getPluginContext('localStorage').storageEngine).toBe(storageEngine);
        expect(storageEngine['global.storageKey.banana']).toEqual(12);
    });
});
//# sourceMappingURL=index.js.map