/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InviteInviteIdRouteImport } from './routes/invite/$inviteId'
import { Route as AppSearchRouteImport } from './routes/app/search'
import { Route as AppMeRouteImport } from './routes/app/me'
import { Route as AppLoginRouteImport } from './routes/app/login'
import { Route as AppDeveloperRouteImport } from './routes/app/developer'
import { Route as AppProjectIndexRouteImport } from './routes/app/project/index'
import { Route as AppProjectProjectIdRouteImport } from './routes/app/project/$projectId'
import { Route as AppCallbacksOauthGoogleRouteImport } from './routes/app/callbacks/oauth/google'
import { Route as AppCallbacksOauthGithubRouteImport } from './routes/app/callbacks/oauth/github'
import { Route as AppCallbacksIntegrationsGithubRouteImport } from './routes/app/callbacks/integrations/github'

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InviteInviteIdRoute = InviteInviteIdRouteImport.update({
  id: '/invite/$inviteId',
  path: '/invite/$inviteId',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRoute,
} as any)
const AppMeRoute = AppMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => AppRoute,
} as any)
const AppLoginRoute = AppLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AppRoute,
} as any)
const AppDeveloperRoute = AppDeveloperRouteImport.update({
  id: '/developer',
  path: '/developer',
  getParentRoute: () => AppRoute,
} as any)
const AppProjectIndexRoute = AppProjectIndexRouteImport.update({
  id: '/project/',
  path: '/project/',
  getParentRoute: () => AppRoute,
} as any)
const AppProjectProjectIdRoute = AppProjectProjectIdRouteImport.update({
  id: '/project/$projectId',
  path: '/project/$projectId',
  getParentRoute: () => AppRoute,
} as any)
const AppCallbacksOauthGoogleRoute = AppCallbacksOauthGoogleRouteImport.update({
  id: '/callbacks/oauth/google',
  path: '/callbacks/oauth/google',
  getParentRoute: () => AppRoute,
} as any)
const AppCallbacksOauthGithubRoute = AppCallbacksOauthGithubRouteImport.update({
  id: '/callbacks/oauth/github',
  path: '/callbacks/oauth/github',
  getParentRoute: () => AppRoute,
} as any)
const AppCallbacksIntegrationsGithubRoute =
  AppCallbacksIntegrationsGithubRouteImport.update({
    id: '/callbacks/integrations/github',
    path: '/callbacks/integrations/github',
    getParentRoute: () => AppRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/developer': typeof AppDeveloperRoute
  '/app/login': typeof AppLoginRoute
  '/app/me': typeof AppMeRoute
  '/app/search': typeof AppSearchRoute
  '/invite/$inviteId': typeof InviteInviteIdRoute
  '/app/project/$projectId': typeof AppProjectProjectIdRoute
  '/app/project': typeof AppProjectIndexRoute
  '/app/callbacks/integrations/github': typeof AppCallbacksIntegrationsGithubRoute
  '/app/callbacks/oauth/github': typeof AppCallbacksOauthGithubRoute
  '/app/callbacks/oauth/google': typeof AppCallbacksOauthGoogleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/developer': typeof AppDeveloperRoute
  '/app/login': typeof AppLoginRoute
  '/app/me': typeof AppMeRoute
  '/app/search': typeof AppSearchRoute
  '/invite/$inviteId': typeof InviteInviteIdRoute
  '/app/project/$projectId': typeof AppProjectProjectIdRoute
  '/app/project': typeof AppProjectIndexRoute
  '/app/callbacks/integrations/github': typeof AppCallbacksIntegrationsGithubRoute
  '/app/callbacks/oauth/github': typeof AppCallbacksOauthGithubRoute
  '/app/callbacks/oauth/google': typeof AppCallbacksOauthGoogleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/app/developer': typeof AppDeveloperRoute
  '/app/login': typeof AppLoginRoute
  '/app/me': typeof AppMeRoute
  '/app/search': typeof AppSearchRoute
  '/invite/$inviteId': typeof InviteInviteIdRoute
  '/app/project/$projectId': typeof AppProjectProjectIdRoute
  '/app/project/': typeof AppProjectIndexRoute
  '/app/callbacks/integrations/github': typeof AppCallbacksIntegrationsGithubRoute
  '/app/callbacks/oauth/github': typeof AppCallbacksOauthGithubRoute
  '/app/callbacks/oauth/google': typeof AppCallbacksOauthGoogleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/developer'
    | '/app/login'
    | '/app/me'
    | '/app/search'
    | '/invite/$inviteId'
    | '/app/project/$projectId'
    | '/app/project'
    | '/app/callbacks/integrations/github'
    | '/app/callbacks/oauth/github'
    | '/app/callbacks/oauth/google'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/app/developer'
    | '/app/login'
    | '/app/me'
    | '/app/search'
    | '/invite/$inviteId'
    | '/app/project/$projectId'
    | '/app/project'
    | '/app/callbacks/integrations/github'
    | '/app/callbacks/oauth/github'
    | '/app/callbacks/oauth/google'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/developer'
    | '/app/login'
    | '/app/me'
    | '/app/search'
    | '/invite/$inviteId'
    | '/app/project/$projectId'
    | '/app/project/'
    | '/app/callbacks/integrations/github'
    | '/app/callbacks/oauth/github'
    | '/app/callbacks/oauth/google'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  InviteInviteIdRoute: typeof InviteInviteIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invite/$inviteId': {
      id: '/invite/$inviteId'
      path: '/invite/$inviteId'
      fullPath: '/invite/$inviteId'
      preLoaderRoute: typeof InviteInviteIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/search': {
      id: '/app/search'
      path: '/search'
      fullPath: '/app/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/me': {
      id: '/app/me'
      path: '/me'
      fullPath: '/app/me'
      preLoaderRoute: typeof AppMeRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/login': {
      id: '/app/login'
      path: '/login'
      fullPath: '/app/login'
      preLoaderRoute: typeof AppLoginRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/developer': {
      id: '/app/developer'
      path: '/developer'
      fullPath: '/app/developer'
      preLoaderRoute: typeof AppDeveloperRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/project/': {
      id: '/app/project/'
      path: '/project'
      fullPath: '/app/project'
      preLoaderRoute: typeof AppProjectIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/project/$projectId': {
      id: '/app/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/app/project/$projectId'
      preLoaderRoute: typeof AppProjectProjectIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/callbacks/oauth/google': {
      id: '/app/callbacks/oauth/google'
      path: '/callbacks/oauth/google'
      fullPath: '/app/callbacks/oauth/google'
      preLoaderRoute: typeof AppCallbacksOauthGoogleRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/callbacks/oauth/github': {
      id: '/app/callbacks/oauth/github'
      path: '/callbacks/oauth/github'
      fullPath: '/app/callbacks/oauth/github'
      preLoaderRoute: typeof AppCallbacksOauthGithubRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/callbacks/integrations/github': {
      id: '/app/callbacks/integrations/github'
      path: '/callbacks/integrations/github'
      fullPath: '/app/callbacks/integrations/github'
      preLoaderRoute: typeof AppCallbacksIntegrationsGithubRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppDeveloperRoute: typeof AppDeveloperRoute
  AppLoginRoute: typeof AppLoginRoute
  AppMeRoute: typeof AppMeRoute
  AppSearchRoute: typeof AppSearchRoute
  AppProjectProjectIdRoute: typeof AppProjectProjectIdRoute
  AppProjectIndexRoute: typeof AppProjectIndexRoute
  AppCallbacksIntegrationsGithubRoute: typeof AppCallbacksIntegrationsGithubRoute
  AppCallbacksOauthGithubRoute: typeof AppCallbacksOauthGithubRoute
  AppCallbacksOauthGoogleRoute: typeof AppCallbacksOauthGoogleRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppDeveloperRoute: AppDeveloperRoute,
  AppLoginRoute: AppLoginRoute,
  AppMeRoute: AppMeRoute,
  AppSearchRoute: AppSearchRoute,
  AppProjectProjectIdRoute: AppProjectProjectIdRoute,
  AppProjectIndexRoute: AppProjectIndexRoute,
  AppCallbacksIntegrationsGithubRoute: AppCallbacksIntegrationsGithubRoute,
  AppCallbacksOauthGithubRoute: AppCallbacksOauthGithubRoute,
  AppCallbacksOauthGoogleRoute: AppCallbacksOauthGoogleRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  InviteInviteIdRoute: InviteInviteIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
