// Generated by kea-typegen on Tue, 14 Oct 2025 19:22:29 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { InvitationsLogicProps } from './invitationsLogic'
import type { DecryptedProject } from './projectLogic'
import type { Invitation } from '../api/invitations.api'

export interface invitationsLogicType extends Logic {
    actionCreators: {
        createInvitation: (passphrase: string, role: "admin" | "read" | "write") => ({
            type: "create invitation (src.lib.logics.invitationsLogic)";
            payload: {
                passphrase: string;
                role: "admin" | "read" | "write";
            };
        });
        setInvitations: (invitations: Invitation[]) => ({
            type: "set invitations (src.lib.logics.invitationsLogic)";
            payload: {
                invitations: Invitation[];
            };
        });
        deleteInvitation: (invitationId: string) => ({
            type: "delete invitation (src.lib.logics.invitationsLogic)";
            payload: {
                invitationId: string;
            };
        });
        loadInvitations: () => ({
            type: "load invitations (src.lib.logics.invitationsLogic)";
            payload: any;
        });
        loadInvitationsSuccess: (invitations: Invitation[], payload?: any) => ({
            type: "load invitations success (src.lib.logics.invitationsLogic)";
            payload: {
                invitations: Invitation[];
                payload?: any;
            };
        });
        loadInvitationsFailure: (error: string, errorObject?: any) => ({
            type: "load invitations failure (src.lib.logics.invitationsLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "create invitation (src.lib.logics.invitationsLogic)": "createInvitation";
        "set invitations (src.lib.logics.invitationsLogic)": "setInvitations";
        "delete invitation (src.lib.logics.invitationsLogic)": "deleteInvitation";
        "load invitations (src.lib.logics.invitationsLogic)": "loadInvitations";
        "load invitations success (src.lib.logics.invitationsLogic)": "loadInvitationsSuccess";
        "load invitations failure (src.lib.logics.invitationsLogic)": "loadInvitationsFailure";
    };
    actionTypes: {
        createInvitation: "create invitation (src.lib.logics.invitationsLogic)";
        setInvitations: "set invitations (src.lib.logics.invitationsLogic)";
        deleteInvitation: "delete invitation (src.lib.logics.invitationsLogic)";
        loadInvitations: "load invitations (src.lib.logics.invitationsLogic)";
        loadInvitationsSuccess: "load invitations success (src.lib.logics.invitationsLogic)";
        loadInvitationsFailure: "load invitations failure (src.lib.logics.invitationsLogic)";
    };
    actions: {
        createInvitation: (passphrase: string, role: "admin" | "read" | "write") => void;
        setInvitations: (invitations: Invitation[]) => void;
        deleteInvitation: (invitationId: string) => void;
        loadInvitations: () => void;
        loadInvitationsSuccess: (invitations: Invitation[], payload?: any) => void;
        loadInvitationsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        createInvitation: (passphrase: string, role: "admin" | "read" | "write") => Promise<any>;
        setInvitations: (invitations: Invitation[]) => Promise<any>;
        deleteInvitation: (invitationId: string) => Promise<any>;
        loadInvitations: () => Promise<any>;
        loadInvitationsSuccess: (invitations: Invitation[], payload?: any) => Promise<any>;
        loadInvitationsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        invitations: Invitation[];
        invitationsLoading: boolean;
    };
    events: {
        afterMount: () => void;
    };
    key: string;
    listeners: {
        "createInvitation": ((action: {
            type: "create invitation (src.lib.logics.invitationsLogic)";
            payload: {
                passphrase: string;
                role: "admin" | "read" | "write";
            };
        }, previousState: any) => void | Promise<void>)[];
        "deleteInvitation": ((action: {
            type: "delete invitation (src.lib.logics.invitationsLogic)";
            payload: {
                invitationId: string;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "invitationsLogic"
    ];
    pathString: "src.lib.logics.invitationsLogic";
    props: InvitationsLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        invitations: Invitation[];
        invitationsLoading: boolean;
    };
    reducers: {
        invitations: (state: Invitation[], action: any, fullState: any) => Invitation[];
        invitationsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        invitations: Invitation[];
        invitationsLoading: boolean;
    };
    selectors: {
        invitations: (state: any, props?: any) => Invitation[];
        invitationsLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
        projectData: (state: any, props?: any) => DecryptedProject | null;
    };
    sharedListeners: {};
    values: {
        invitations: Invitation[];
        invitationsLoading: boolean;
        jwtToken: string | null;
        projectData: DecryptedProject | null;
    };
    _isKea: true;
    _isKeaWithKey: true;
}