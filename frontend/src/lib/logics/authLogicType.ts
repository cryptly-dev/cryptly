// Generated by kea-typegen on Wed, 24 Sep 2025 18:45:33 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { User } from '../api/user.api'

export interface authLogicType extends Logic {
    actionCreators: {
        setJwtToken: (jwtToken: string) => ({
            type: "set jwt token (src.lib.logics.authLogic)";
            payload: {
                jwtToken: string;
            };
        });
        setUserData: (userData: User) => ({
            type: "set user data (src.lib.logics.authLogic)";
            payload: {
                userData: User;
            };
        });
        reset: () => ({
            type: "reset (src.lib.logics.authLogic)";
            payload: {
                value: true;
            };
        });
        logout: () => ({
            type: "logout (src.lib.logics.authLogic)";
            payload: {
                value: true;
            };
        });
        exchangeGoogleCodeForJwt: (googleCode: string) => ({
            type: "exchange google code for jwt (src.lib.logics.authLogic)";
            payload: string;
        });
        exchangeGoogleCodeForJwtSuccess: (jwtToken: string | null, payload?: string) => ({
            type: "exchange google code for jwt success (src.lib.logics.authLogic)";
            payload: {
                jwtToken: string | null;
                payload?: string;
            };
        });
        exchangeGoogleCodeForJwtFailure: (error: string, errorObject?: any) => ({
            type: "exchange google code for jwt failure (src.lib.logics.authLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        exchangeGithubCodeForJwt: (githubCode: string) => ({
            type: "exchange github code for jwt (src.lib.logics.authLogic)";
            payload: string;
        });
        exchangeGithubCodeForJwtSuccess: (jwtToken: string | null, payload?: string) => ({
            type: "exchange github code for jwt success (src.lib.logics.authLogic)";
            payload: {
                jwtToken: string | null;
                payload?: string;
            };
        });
        exchangeGithubCodeForJwtFailure: (error: string, errorObject?: any) => ({
            type: "exchange github code for jwt failure (src.lib.logics.authLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        loadUserData: () => ({
            type: "load user data (src.lib.logics.authLogic)";
            payload: any;
        });
        loadUserDataSuccess: (userData: User, payload?: any) => ({
            type: "load user data success (src.lib.logics.authLogic)";
            payload: {
                userData: User;
                payload?: any;
            };
        });
        loadUserDataFailure: (error: string, errorObject?: any) => ({
            type: "load user data failure (src.lib.logics.authLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "set jwt token (src.lib.logics.authLogic)": "setJwtToken";
        "set user data (src.lib.logics.authLogic)": "setUserData";
        "reset (src.lib.logics.authLogic)": "reset";
        "logout (src.lib.logics.authLogic)": "logout";
        "exchange google code for jwt (src.lib.logics.authLogic)": "exchangeGoogleCodeForJwt";
        "exchange google code for jwt success (src.lib.logics.authLogic)": "exchangeGoogleCodeForJwtSuccess";
        "exchange google code for jwt failure (src.lib.logics.authLogic)": "exchangeGoogleCodeForJwtFailure";
        "exchange github code for jwt (src.lib.logics.authLogic)": "exchangeGithubCodeForJwt";
        "exchange github code for jwt success (src.lib.logics.authLogic)": "exchangeGithubCodeForJwtSuccess";
        "exchange github code for jwt failure (src.lib.logics.authLogic)": "exchangeGithubCodeForJwtFailure";
        "load user data (src.lib.logics.authLogic)": "loadUserData";
        "load user data success (src.lib.logics.authLogic)": "loadUserDataSuccess";
        "load user data failure (src.lib.logics.authLogic)": "loadUserDataFailure";
    };
    actionTypes: {
        setJwtToken: "set jwt token (src.lib.logics.authLogic)";
        setUserData: "set user data (src.lib.logics.authLogic)";
        reset: "reset (src.lib.logics.authLogic)";
        logout: "logout (src.lib.logics.authLogic)";
        exchangeGoogleCodeForJwt: "exchange google code for jwt (src.lib.logics.authLogic)";
        exchangeGoogleCodeForJwtSuccess: "exchange google code for jwt success (src.lib.logics.authLogic)";
        exchangeGoogleCodeForJwtFailure: "exchange google code for jwt failure (src.lib.logics.authLogic)";
        exchangeGithubCodeForJwt: "exchange github code for jwt (src.lib.logics.authLogic)";
        exchangeGithubCodeForJwtSuccess: "exchange github code for jwt success (src.lib.logics.authLogic)";
        exchangeGithubCodeForJwtFailure: "exchange github code for jwt failure (src.lib.logics.authLogic)";
        loadUserData: "load user data (src.lib.logics.authLogic)";
        loadUserDataSuccess: "load user data success (src.lib.logics.authLogic)";
        loadUserDataFailure: "load user data failure (src.lib.logics.authLogic)";
    };
    actions: {
        setJwtToken: (jwtToken: string) => void;
        setUserData: (userData: User) => void;
        reset: () => void;
        logout: () => void;
        exchangeGoogleCodeForJwt: (googleCode: string) => void;
        exchangeGoogleCodeForJwtSuccess: (jwtToken: string | null, payload?: string) => void;
        exchangeGoogleCodeForJwtFailure: (error: string, errorObject?: any) => void;
        exchangeGithubCodeForJwt: (githubCode: string) => void;
        exchangeGithubCodeForJwtSuccess: (jwtToken: string | null, payload?: string) => void;
        exchangeGithubCodeForJwtFailure: (error: string, errorObject?: any) => void;
        loadUserData: () => void;
        loadUserDataSuccess: (userData: User, payload?: any) => void;
        loadUserDataFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        setJwtToken: (jwtToken: string) => Promise<any>;
        setUserData: (userData: User) => Promise<any>;
        reset: () => Promise<any>;
        logout: () => Promise<any>;
        exchangeGoogleCodeForJwt: (googleCode: string) => Promise<any>;
        exchangeGoogleCodeForJwtSuccess: (jwtToken: string | null, payload?: string) => Promise<any>;
        exchangeGoogleCodeForJwtFailure: (error: string, errorObject?: any) => Promise<any>;
        exchangeGithubCodeForJwt: (githubCode: string) => Promise<any>;
        exchangeGithubCodeForJwtSuccess: (jwtToken: string | null, payload?: string) => Promise<any>;
        exchangeGithubCodeForJwtFailure: (error: string, errorObject?: any) => Promise<any>;
        loadUserData: () => Promise<any>;
        loadUserDataSuccess: (userData: User, payload?: any) => Promise<any>;
        loadUserDataFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        userData: User | null;
        jwtToken: string | null;
        jwtTokenLoading: boolean;
        userDataLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {
        "logout": ((action: {
            type: "logout (src.lib.logics.authLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "authLogic"
    ];
    pathString: "src.lib.logics.authLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        userData: User | null;
        jwtToken: string | null;
        jwtTokenLoading: boolean;
        userDataLoading: boolean;
    };
    reducers: {
        userData: (state: User | null, action: any, fullState: any) => User | null;
        jwtToken: (state: string | null, action: any, fullState: any) => string | null;
        jwtTokenLoading: (state: boolean, action: any, fullState: any) => boolean;
        userDataLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        userData: User | null;
        jwtToken: string | null;
        jwtTokenLoading: boolean;
        userDataLoading: boolean;
    };
    selectors: {
        userData: (state: any, props?: any) => User | null;
        jwtToken: (state: any, props?: any) => string | null;
        jwtTokenLoading: (state: any, props?: any) => boolean;
        userDataLoading: (state: any, props?: any) => boolean;
        isLoggedIn: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        userData: User | null;
        jwtToken: string | null;
        jwtTokenLoading: boolean;
        userDataLoading: boolean;
        isLoggedIn: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        isLoggedIn: (jwtToken: string | null) => boolean;
    };
}