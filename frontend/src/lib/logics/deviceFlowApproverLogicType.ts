// Generated by kea-typegen on Sat, 18 Oct 2025 12:18:31 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventSourceWrapper } from './EventSourceWrapper'

export interface deviceFlowApproverLogicType extends Logic {
    actionCreators: {
        ping: () => ({
            type: "ping (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        startPinging: () => ({
            type: "start pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        stopPinging: () => ({
            type: "stop pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        setPingInterval: (intervalId: any) => ({
            type: "set ping interval (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                intervalId: any;
            };
        });
        openMessageStream: () => ({
            type: "open message stream (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        closeMessageStream: () => ({
            type: "close message stream (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        setMessageConnection: (connection: EventSourceWrapper | null) => ({
            type: "set message connection (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                connection: EventSourceWrapper | null;
            };
        });
        handleMessage: (message: any) => ({
            type: "handle message (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                message: any;
            };
        });
        clearMessage: () => ({
            type: "clear message (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        "ping (src.lib.logics.deviceFlowApproverLogic)": "ping";
        "start pinging (src.lib.logics.deviceFlowApproverLogic)": "startPinging";
        "stop pinging (src.lib.logics.deviceFlowApproverLogic)": "stopPinging";
        "set ping interval (src.lib.logics.deviceFlowApproverLogic)": "setPingInterval";
        "open message stream (src.lib.logics.deviceFlowApproverLogic)": "openMessageStream";
        "close message stream (src.lib.logics.deviceFlowApproverLogic)": "closeMessageStream";
        "set message connection (src.lib.logics.deviceFlowApproverLogic)": "setMessageConnection";
        "handle message (src.lib.logics.deviceFlowApproverLogic)": "handleMessage";
        "clear message (src.lib.logics.deviceFlowApproverLogic)": "clearMessage";
    };
    actionTypes: {
        ping: "ping (src.lib.logics.deviceFlowApproverLogic)";
        startPinging: "start pinging (src.lib.logics.deviceFlowApproverLogic)";
        stopPinging: "stop pinging (src.lib.logics.deviceFlowApproverLogic)";
        setPingInterval: "set ping interval (src.lib.logics.deviceFlowApproverLogic)";
        openMessageStream: "open message stream (src.lib.logics.deviceFlowApproverLogic)";
        closeMessageStream: "close message stream (src.lib.logics.deviceFlowApproverLogic)";
        setMessageConnection: "set message connection (src.lib.logics.deviceFlowApproverLogic)";
        handleMessage: "handle message (src.lib.logics.deviceFlowApproverLogic)";
        clearMessage: "clear message (src.lib.logics.deviceFlowApproverLogic)";
    };
    actions: {
        ping: () => void;
        startPinging: () => void;
        stopPinging: () => void;
        setPingInterval: (intervalId: any) => void;
        openMessageStream: () => void;
        closeMessageStream: () => void;
        setMessageConnection: (connection: EventSourceWrapper | null) => void;
        handleMessage: (message: any) => void;
        clearMessage: () => void;
    };
    asyncActions: {
        ping: () => Promise<any>;
        startPinging: () => Promise<any>;
        stopPinging: () => Promise<any>;
        setPingInterval: (intervalId: any) => Promise<any>;
        openMessageStream: () => Promise<any>;
        closeMessageStream: () => Promise<any>;
        setMessageConnection: (connection: EventSourceWrapper | null) => Promise<any>;
        handleMessage: (message: any) => Promise<any>;
        clearMessage: () => Promise<any>;
    };
    defaults: {
        pingInterval: any;
        messageConnection: EventSourceWrapper | null;
        lastMessage: any;
    };
    events: {
        afterMount: () => void;
        beforeUnmount: () => void;
    };
    key: undefined;
    listeners: {
        "ping": ((action: {
            type: "ping (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "startPinging": ((action: {
            type: "start pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "stopPinging": ((action: {
            type: "stop pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "openMessageStream": ((action: {
            type: "open message stream (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "closeMessageStream": ((action: {
            type: "close message stream (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "deviceFlowApproverLogic"
    ];
    pathString: "src.lib.logics.deviceFlowApproverLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        pingInterval: any;
        messageConnection: EventSourceWrapper | null;
        lastMessage: any;
    };
    reducers: {
        pingInterval: (state: any, action: any, fullState: any) => any;
        messageConnection: (state: EventSourceWrapper | null, action: any, fullState: any) => EventSourceWrapper | null;
        lastMessage: (state: any, action: any, fullState: any) => any;
    };
    selector: (state: any) => {
        pingInterval: any;
        messageConnection: EventSourceWrapper | null;
        lastMessage: any;
    };
    selectors: {
        pingInterval: (state: any, props?: any) => any;
        messageConnection: (state: any, props?: any) => EventSourceWrapper | null;
        lastMessage: (state: any, props?: any) => any;
        jwtToken: (state: any, props?: any) => string | null;
        isLoggedIn: (state: any, props?: any) => boolean;
        browserIsUnlocked: (state: any, props?: any) => boolean;
        hasNewMessage: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        pingInterval: any;
        messageConnection: EventSourceWrapper | null;
        lastMessage: any;
        jwtToken: string | null;
        isLoggedIn: boolean;
        browserIsUnlocked: boolean;
        hasNewMessage: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        hasNewMessage: (lastMessage: any) => boolean;
    };
}