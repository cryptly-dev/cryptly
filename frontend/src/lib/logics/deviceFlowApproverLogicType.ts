// Generated by kea-typegen on Sat, 18 Oct 2025 12:00:28 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface deviceFlowApproverLogicType extends Logic {
    actionCreators: {
        ping: () => ({
            type: "ping (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        startPinging: () => ({
            type: "start pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        stopPinging: () => ({
            type: "stop pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        });
        setPingInterval: (intervalId: any) => ({
            type: "set ping interval (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                intervalId: any;
            };
        });
    };
    actionKeys: {
        "ping (src.lib.logics.deviceFlowApproverLogic)": "ping";
        "start pinging (src.lib.logics.deviceFlowApproverLogic)": "startPinging";
        "stop pinging (src.lib.logics.deviceFlowApproverLogic)": "stopPinging";
        "set ping interval (src.lib.logics.deviceFlowApproverLogic)": "setPingInterval";
    };
    actionTypes: {
        ping: "ping (src.lib.logics.deviceFlowApproverLogic)";
        startPinging: "start pinging (src.lib.logics.deviceFlowApproverLogic)";
        stopPinging: "stop pinging (src.lib.logics.deviceFlowApproverLogic)";
        setPingInterval: "set ping interval (src.lib.logics.deviceFlowApproverLogic)";
    };
    actions: {
        ping: () => void;
        startPinging: () => void;
        stopPinging: () => void;
        setPingInterval: (intervalId: any) => void;
    };
    asyncActions: {
        ping: () => Promise<any>;
        startPinging: () => Promise<any>;
        stopPinging: () => Promise<any>;
        setPingInterval: (intervalId: any) => Promise<any>;
    };
    defaults: {
        pingInterval: any;
    };
    events: {
        afterMount: () => void;
        beforeUnmount: () => void;
    };
    key: undefined;
    listeners: {
        "ping": ((action: {
            type: "ping (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "startPinging": ((action: {
            type: "start pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "stopPinging": ((action: {
            type: "stop pinging (src.lib.logics.deviceFlowApproverLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "deviceFlowApproverLogic"
    ];
    pathString: "src.lib.logics.deviceFlowApproverLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        pingInterval: any;
    };
    reducers: {
        pingInterval: (state: any, action: any, fullState: any) => any;
    };
    selector: (state: any) => {
        pingInterval: any;
    };
    selectors: {
        pingInterval: (state: any, props?: any) => any;
        jwtToken: (state: any, props?: any) => string | null;
        isLoggedIn: (state: any, props?: any) => boolean;
        browserIsUnlocked: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        pingInterval: any;
        jwtToken: string | null;
        isLoggedIn: boolean;
        browserIsUnlocked: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}