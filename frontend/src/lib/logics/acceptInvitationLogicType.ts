// Generated by kea-typegen on Sun, 28 Sep 2025 18:14:20 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { AcceptInvitationLogicProps } from './acceptInvitationLogic'
import type { User } from '../api/user.api'
import type { Invitation } from '../api/invitations.api'

export interface acceptInvitationLogicType extends Logic {
    actionCreators: {
        loadInvitation: () => ({
            type: "load invitation (src.lib.logics.acceptInvitationLogic)";
            payload: {
                value: true;
            };
        });
        acceptInvitation: (passphrase: string) => ({
            type: "accept invitation (src.lib.logics.acceptInvitationLogic)";
            payload: {
                passphrase: string;
            };
        });
        loadInvitationSuccess: (invitation: Invitation, payload?: {
            value: true;
        }) => ({
            type: "load invitation success (src.lib.logics.acceptInvitationLogic)";
            payload: {
                invitation: Invitation;
                payload?: {
                    value: true;
                };
            };
        });
        loadInvitationFailure: (error: string, errorObject?: any) => ({
            type: "load invitation failure (src.lib.logics.acceptInvitationLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load invitation (src.lib.logics.acceptInvitationLogic)": "loadInvitation";
        "accept invitation (src.lib.logics.acceptInvitationLogic)": "acceptInvitation";
        "load invitation success (src.lib.logics.acceptInvitationLogic)": "loadInvitationSuccess";
        "load invitation failure (src.lib.logics.acceptInvitationLogic)": "loadInvitationFailure";
    };
    actionTypes: {
        loadInvitation: "load invitation (src.lib.logics.acceptInvitationLogic)";
        acceptInvitation: "accept invitation (src.lib.logics.acceptInvitationLogic)";
        loadInvitationSuccess: "load invitation success (src.lib.logics.acceptInvitationLogic)";
        loadInvitationFailure: "load invitation failure (src.lib.logics.acceptInvitationLogic)";
    };
    actions: {
        loadInvitation: () => void;
        acceptInvitation: (passphrase: string) => void;
        loadInvitationSuccess: (invitation: Invitation, payload?: {
            value: true;
        }) => void;
        loadInvitationFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadInvitation: () => Promise<any>;
        acceptInvitation: (passphrase: string) => Promise<any>;
        loadInvitationSuccess: (invitation: Invitation, payload?: {
            value: true;
        }) => Promise<any>;
        loadInvitationFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        invitation: Invitation | null;
        invitationLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "acceptInvitation": ((action: {
            type: "accept invitation (src.lib.logics.acceptInvitationLogic)";
            payload: {
                passphrase: string;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "acceptInvitationLogic"
    ];
    pathString: "src.lib.logics.acceptInvitationLogic";
    props: AcceptInvitationLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        invitation: Invitation | null;
        invitationLoading: boolean;
    };
    reducers: {
        invitation: (state: Invitation | null, action: any, fullState: any) => Invitation | null;
        invitationLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        invitation: Invitation | null;
        invitationLoading: boolean;
    };
    selectors: {
        invitation: (state: any, props?: any) => Invitation | null;
        invitationLoading: (state: any, props?: any) => boolean;
        userData: (state: any, props?: any) => User | null;
        jwtToken: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        invitation: Invitation | null;
        invitationLoading: boolean;
        userData: User | null;
        jwtToken: string | null;
    };
    _isKea: true;
    _isKeaWithKey: true;
}