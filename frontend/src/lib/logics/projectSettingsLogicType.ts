// Generated by kea-typegen on Wed, 24 Sep 2025 19:21:30 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ProjectSettingsLogicProps } from './projectSettingsLogic'
import type { RemoveMemberDto, UpdateMemberRoleDto, UpdateProjectDto } from '../api/projects.api'

export interface projectSettingsLogicType extends Logic {
    actionCreators: {
        loadProjects: () => ({
            type: "load projects (src.lib.logics.projectSettingsLogic)";
            payload: {
                value: true;
            };
        });
        loadProjectData: () => ({
            type: "load project data (src.lib.logics.projectSettingsLogic)";
            payload: any;
        });
        updateProject: (dto: UpdateProjectDto) => ({
            type: "update project (src.lib.logics.projectSettingsLogic)";
            payload: {
                dto: UpdateProjectDto;
            };
        });
        setUpdateProjectLoading: (updateProjectLoading: boolean) => ({
            type: "set update project loading (src.lib.logics.projectSettingsLogic)";
            payload: {
                updateProjectLoading: boolean;
            };
        });
        updateMemberRole: (dto: UpdateMemberRoleDto) => ({
            type: "update member role (src.lib.logics.projectSettingsLogic)";
            payload: {
                dto: UpdateMemberRoleDto;
            };
        });
        setUpdateMemberRoleLoading: (updateMemberRoleLoading: boolean) => ({
            type: "set update member role loading (src.lib.logics.projectSettingsLogic)";
            payload: {
                updateMemberRoleLoading: boolean;
            };
        });
        removeMember: (dto: RemoveMemberDto) => ({
            type: "remove member (src.lib.logics.projectSettingsLogic)";
            payload: {
                dto: RemoveMemberDto;
            };
        });
        deleteProject: () => ({
            type: "delete project (src.lib.logics.projectSettingsLogic)";
            payload: {
                value: true;
            };
        });
        setDeleteProjectLoading: (deleteProjectLoading: boolean) => ({
            type: "set delete project loading (src.lib.logics.projectSettingsLogic)";
            payload: {
                deleteProjectLoading: boolean;
            };
        });
    };
    actionKeys: {
        "load projects (src.lib.logics.projectSettingsLogic)": "loadProjects";
        "load project data (src.lib.logics.projectSettingsLogic)": "loadProjectData";
        "update project (src.lib.logics.projectSettingsLogic)": "updateProject";
        "set update project loading (src.lib.logics.projectSettingsLogic)": "setUpdateProjectLoading";
        "update member role (src.lib.logics.projectSettingsLogic)": "updateMemberRole";
        "set update member role loading (src.lib.logics.projectSettingsLogic)": "setUpdateMemberRoleLoading";
        "remove member (src.lib.logics.projectSettingsLogic)": "removeMember";
        "delete project (src.lib.logics.projectSettingsLogic)": "deleteProject";
        "set delete project loading (src.lib.logics.projectSettingsLogic)": "setDeleteProjectLoading";
    };
    actionTypes: {
        loadProjects: "load projects (src.lib.logics.projectSettingsLogic)";
        loadProjectData: "load project data (src.lib.logics.projectSettingsLogic)";
        updateProject: "update project (src.lib.logics.projectSettingsLogic)";
        setUpdateProjectLoading: "set update project loading (src.lib.logics.projectSettingsLogic)";
        updateMemberRole: "update member role (src.lib.logics.projectSettingsLogic)";
        setUpdateMemberRoleLoading: "set update member role loading (src.lib.logics.projectSettingsLogic)";
        removeMember: "remove member (src.lib.logics.projectSettingsLogic)";
        deleteProject: "delete project (src.lib.logics.projectSettingsLogic)";
        setDeleteProjectLoading: "set delete project loading (src.lib.logics.projectSettingsLogic)";
    };
    actions: {
        loadProjects: () => void;
        loadProjectData: () => void;
        updateProject: (dto: UpdateProjectDto) => void;
        setUpdateProjectLoading: (updateProjectLoading: boolean) => void;
        updateMemberRole: (dto: UpdateMemberRoleDto) => void;
        setUpdateMemberRoleLoading: (updateMemberRoleLoading: boolean) => void;
        removeMember: (dto: RemoveMemberDto) => void;
        deleteProject: () => void;
        setDeleteProjectLoading: (deleteProjectLoading: boolean) => void;
    };
    asyncActions: {
        loadProjects: () => Promise<any>;
        loadProjectData: () => Promise<any>;
        updateProject: (dto: UpdateProjectDto) => Promise<any>;
        setUpdateProjectLoading: (updateProjectLoading: boolean) => Promise<any>;
        updateMemberRole: (dto: UpdateMemberRoleDto) => Promise<any>;
        setUpdateMemberRoleLoading: (updateMemberRoleLoading: boolean) => Promise<any>;
        removeMember: (dto: RemoveMemberDto) => Promise<any>;
        deleteProject: () => Promise<any>;
        setDeleteProjectLoading: (deleteProjectLoading: boolean) => Promise<any>;
    };
    defaults: {
        updateProjectLoading: boolean;
        updateMemberRoleLoading: boolean;
        deleteProjectLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "updateProject": ((action: {
            type: "update project (src.lib.logics.projectSettingsLogic)";
            payload: {
                dto: UpdateProjectDto;
            };
        }, previousState: any) => void | Promise<void>)[];
        "updateMemberRole": ((action: {
            type: "update member role (src.lib.logics.projectSettingsLogic)";
            payload: {
                dto: UpdateMemberRoleDto;
            };
        }, previousState: any) => void | Promise<void>)[];
        "removeMember": ((action: {
            type: "remove member (src.lib.logics.projectSettingsLogic)";
            payload: {
                dto: RemoveMemberDto;
            };
        }, previousState: any) => void | Promise<void>)[];
        "deleteProject": ((action: {
            type: "delete project (src.lib.logics.projectSettingsLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "projectSettingsLogic"
    ];
    pathString: "src.lib.logics.projectSettingsLogic";
    props: ProjectSettingsLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        updateProjectLoading: boolean;
        updateMemberRoleLoading: boolean;
        deleteProjectLoading: boolean;
    };
    reducers: {
        updateProjectLoading: (state: boolean, action: any, fullState: any) => boolean;
        updateMemberRoleLoading: (state: boolean, action: any, fullState: any) => boolean;
        deleteProjectLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        updateProjectLoading: boolean;
        updateMemberRoleLoading: boolean;
        deleteProjectLoading: boolean;
    };
    selectors: {
        updateProjectLoading: (state: any, props?: any) => boolean;
        updateMemberRoleLoading: (state: any, props?: any) => boolean;
        deleteProjectLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        updateProjectLoading: boolean;
        updateMemberRoleLoading: boolean;
        deleteProjectLoading: boolean;
        jwtToken: string | null;
    };
    _isKea: true;
    _isKeaWithKey: true;
}