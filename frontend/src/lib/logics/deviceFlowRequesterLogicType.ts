// Generated by kea-typegen on Sun, 19 Oct 2025 19:39:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventSourceWrapper } from './EventSourceWrapper'
import type { Device } from '../api/device-flow.api'

export interface deviceFlowRequesterLogicType extends Logic {
    actionCreators: {
        setPassphrase: (passphrase: string) => ({
            type: "set passphrase (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                passphrase: string;
            };
        });
        decryptPrivateKey: () => ({
            type: "decrypt private key (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        sendMessage: (deviceId: string, message: any, role: "approver" | "requester") => ({
            type: "send message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
                message: any;
                role: "approver" | "requester";
            };
        });
        requestUnlock: (deviceId: string) => ({
            type: "request unlock (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
            };
        });
        setUnlockRequestPrivateKey: (privateKey: string | null) => ({
            type: "set unlock request private key (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                privateKey: string | null;
            };
        });
        setUnlockRequestPin: (pin: string | null) => ({
            type: "set unlock request pin (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                pin: string | null;
            };
        });
        openMessageStream: () => ({
            type: "open message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        closeMessageStream: () => ({
            type: "close message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        setMessageConnection: (connection: EventSourceWrapper | null) => ({
            type: "set message connection (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                connection: EventSourceWrapper | null;
            };
        });
        handleMessage: (message: any) => ({
            type: "handle message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        });
        setApprovers: (approvers: Device[]) => ({
            type: "set approvers (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                approvers: Device[];
            };
        });
        clearReceivedMessage: () => ({
            type: "clear received message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        startRequester: () => ({
            type: "start requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        stopRequester: () => ({
            type: "stop requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        "set passphrase (src.lib.logics.deviceFlowRequesterLogic)": "setPassphrase";
        "decrypt private key (src.lib.logics.deviceFlowRequesterLogic)": "decryptPrivateKey";
        "send message (src.lib.logics.deviceFlowRequesterLogic)": "sendMessage";
        "request unlock (src.lib.logics.deviceFlowRequesterLogic)": "requestUnlock";
        "set unlock request private key (src.lib.logics.deviceFlowRequesterLogic)": "setUnlockRequestPrivateKey";
        "set unlock request pin (src.lib.logics.deviceFlowRequesterLogic)": "setUnlockRequestPin";
        "open message stream (src.lib.logics.deviceFlowRequesterLogic)": "openMessageStream";
        "close message stream (src.lib.logics.deviceFlowRequesterLogic)": "closeMessageStream";
        "set message connection (src.lib.logics.deviceFlowRequesterLogic)": "setMessageConnection";
        "handle message (src.lib.logics.deviceFlowRequesterLogic)": "handleMessage";
        "set approvers (src.lib.logics.deviceFlowRequesterLogic)": "setApprovers";
        "clear received message (src.lib.logics.deviceFlowRequesterLogic)": "clearReceivedMessage";
        "start requester (src.lib.logics.deviceFlowRequesterLogic)": "startRequester";
        "stop requester (src.lib.logics.deviceFlowRequesterLogic)": "stopRequester";
    };
    actionTypes: {
        setPassphrase: "set passphrase (src.lib.logics.deviceFlowRequesterLogic)";
        decryptPrivateKey: "decrypt private key (src.lib.logics.deviceFlowRequesterLogic)";
        sendMessage: "send message (src.lib.logics.deviceFlowRequesterLogic)";
        requestUnlock: "request unlock (src.lib.logics.deviceFlowRequesterLogic)";
        setUnlockRequestPrivateKey: "set unlock request private key (src.lib.logics.deviceFlowRequesterLogic)";
        setUnlockRequestPin: "set unlock request pin (src.lib.logics.deviceFlowRequesterLogic)";
        openMessageStream: "open message stream (src.lib.logics.deviceFlowRequesterLogic)";
        closeMessageStream: "close message stream (src.lib.logics.deviceFlowRequesterLogic)";
        setMessageConnection: "set message connection (src.lib.logics.deviceFlowRequesterLogic)";
        handleMessage: "handle message (src.lib.logics.deviceFlowRequesterLogic)";
        setApprovers: "set approvers (src.lib.logics.deviceFlowRequesterLogic)";
        clearReceivedMessage: "clear received message (src.lib.logics.deviceFlowRequesterLogic)";
        startRequester: "start requester (src.lib.logics.deviceFlowRequesterLogic)";
        stopRequester: "stop requester (src.lib.logics.deviceFlowRequesterLogic)";
    };
    actions: {
        setPassphrase: (passphrase: string) => void;
        decryptPrivateKey: () => void;
        sendMessage: (deviceId: string, message: any, role: "approver" | "requester") => void;
        requestUnlock: (deviceId: string) => void;
        setUnlockRequestPrivateKey: (privateKey: string | null) => void;
        setUnlockRequestPin: (pin: string | null) => void;
        openMessageStream: () => void;
        closeMessageStream: () => void;
        setMessageConnection: (connection: EventSourceWrapper | null) => void;
        handleMessage: (message: any) => void;
        setApprovers: (approvers: Device[]) => void;
        clearReceivedMessage: () => void;
        startRequester: () => void;
        stopRequester: () => void;
    };
    asyncActions: {
        setPassphrase: (passphrase: string) => Promise<any>;
        decryptPrivateKey: () => Promise<any>;
        sendMessage: (deviceId: string, message: any, role: "approver" | "requester") => Promise<any>;
        requestUnlock: (deviceId: string) => Promise<any>;
        setUnlockRequestPrivateKey: (privateKey: string | null) => Promise<any>;
        setUnlockRequestPin: (pin: string | null) => Promise<any>;
        openMessageStream: () => Promise<any>;
        closeMessageStream: () => Promise<any>;
        setMessageConnection: (connection: EventSourceWrapper | null) => Promise<any>;
        handleMessage: (message: any) => Promise<any>;
        setApprovers: (approvers: Device[]) => Promise<any>;
        clearReceivedMessage: () => Promise<any>;
        startRequester: () => Promise<any>;
        stopRequester: () => Promise<any>;
    };
    defaults: {
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        approvers: Device[];
    };
    events: {
        beforeUnmount: () => void;
    };
    key: undefined;
    listeners: {
        "sendMessage": ((action: {
            type: "send message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
                message: any;
                role: "approver" | "requester";
            };
        }, previousState: any) => void | Promise<void>)[];
        "requestUnlock": ((action: {
            type: "request unlock (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
            };
        }, previousState: any) => void | Promise<void>)[];
        "openMessageStream": ((action: {
            type: "open message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "closeMessageStream": ((action: {
            type: "close message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "startRequester": ((action: {
            type: "start requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "stopRequester": ((action: {
            type: "stop requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "handleMessage": ((action: {
            type: "handle message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "deviceFlowRequesterLogic"
    ];
    pathString: "src.lib.logics.deviceFlowRequesterLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        approvers: Device[];
    };
    reducers: {
        unlockRequestPrivateKey: (state: string | null, action: any, fullState: any) => string | null;
        unlockRequestPin: (state: string | null, action: any, fullState: any) => string | null;
        messageConnection: (state: EventSourceWrapper | null, action: any, fullState: any) => EventSourceWrapper | null;
        receivedMessage: (state: any, action: any, fullState: any) => any;
        approvers: (state: Device[], action: any, fullState: any) => Device[];
    };
    selector: (state: any) => {
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        approvers: Device[];
    };
    selectors: {
        unlockRequestPrivateKey: (state: any, props?: any) => string | null;
        unlockRequestPin: (state: any, props?: any) => string | null;
        messageConnection: (state: any, props?: any) => EventSourceWrapper | null;
        receivedMessage: (state: any, props?: any) => any;
        approvers: (state: any, props?: any) => Device[];
        jwtToken: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        approvers: Device[];
        jwtToken: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}