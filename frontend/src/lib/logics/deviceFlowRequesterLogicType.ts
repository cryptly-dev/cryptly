// Generated by kea-typegen on Sat, 18 Oct 2025 13:07:35 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { EventSourceWrapper } from './EventSourceWrapper'
import type { Device } from '../api/device-flow.api'

export interface deviceFlowRequesterLogicType extends Logic {
    actionCreators: {
        setPassphrase: (passphrase: string) => ({
            type: "set passphrase (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                passphrase: string;
            };
        });
        decryptPrivateKey: () => ({
            type: "decrypt private key (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        loadDevices: () => ({
            type: "load devices (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        startRefreshing: () => ({
            type: "start refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        stopRefreshing: () => ({
            type: "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        setRefreshInterval: (intervalId: any) => ({
            type: "set refresh interval (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                intervalId: any;
            };
        });
        sendMessage: (deviceId: string, message: any) => ({
            type: "send message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
                message: any;
            };
        });
        sendMessageToAll: (message: any) => ({
            type: "send message to all (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        });
        requestUnlock: () => ({
            type: "request unlock (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        setUnlockRequestPrivateKey: (privateKey: string | null) => ({
            type: "set unlock request private key (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                privateKey: string | null;
            };
        });
        setUnlockRequestPin: (pin: string | null) => ({
            type: "set unlock request pin (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                pin: string | null;
            };
        });
        openMessageStream: () => ({
            type: "open message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        closeMessageStream: () => ({
            type: "close message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        setMessageConnection: (connection: EventSourceWrapper | null) => ({
            type: "set message connection (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                connection: EventSourceWrapper | null;
            };
        });
        handleMessage: (message: any) => ({
            type: "handle message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        });
        clearReceivedMessage: () => ({
            type: "clear received message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        startRequester: () => ({
            type: "start requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        stopRequester: () => ({
            type: "stop requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        loadDevicesSuccess: (devices: Device[], payload?: {
            value: true;
        }) => ({
            type: "load devices success (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                devices: Device[];
                payload?: {
                    value: true;
                };
            };
        });
        loadDevicesFailure: (error: string, errorObject?: any) => ({
            type: "load devices failure (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "set passphrase (src.lib.logics.deviceFlowRequesterLogic)": "setPassphrase";
        "decrypt private key (src.lib.logics.deviceFlowRequesterLogic)": "decryptPrivateKey";
        "load devices (src.lib.logics.deviceFlowRequesterLogic)": "loadDevices";
        "start refreshing (src.lib.logics.deviceFlowRequesterLogic)": "startRefreshing";
        "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)": "stopRefreshing";
        "set refresh interval (src.lib.logics.deviceFlowRequesterLogic)": "setRefreshInterval";
        "send message (src.lib.logics.deviceFlowRequesterLogic)": "sendMessage";
        "send message to all (src.lib.logics.deviceFlowRequesterLogic)": "sendMessageToAll";
        "request unlock (src.lib.logics.deviceFlowRequesterLogic)": "requestUnlock";
        "set unlock request private key (src.lib.logics.deviceFlowRequesterLogic)": "setUnlockRequestPrivateKey";
        "set unlock request pin (src.lib.logics.deviceFlowRequesterLogic)": "setUnlockRequestPin";
        "open message stream (src.lib.logics.deviceFlowRequesterLogic)": "openMessageStream";
        "close message stream (src.lib.logics.deviceFlowRequesterLogic)": "closeMessageStream";
        "set message connection (src.lib.logics.deviceFlowRequesterLogic)": "setMessageConnection";
        "handle message (src.lib.logics.deviceFlowRequesterLogic)": "handleMessage";
        "clear received message (src.lib.logics.deviceFlowRequesterLogic)": "clearReceivedMessage";
        "start requester (src.lib.logics.deviceFlowRequesterLogic)": "startRequester";
        "stop requester (src.lib.logics.deviceFlowRequesterLogic)": "stopRequester";
        "load devices success (src.lib.logics.deviceFlowRequesterLogic)": "loadDevicesSuccess";
        "load devices failure (src.lib.logics.deviceFlowRequesterLogic)": "loadDevicesFailure";
    };
    actionTypes: {
        setPassphrase: "set passphrase (src.lib.logics.deviceFlowRequesterLogic)";
        decryptPrivateKey: "decrypt private key (src.lib.logics.deviceFlowRequesterLogic)";
        loadDevices: "load devices (src.lib.logics.deviceFlowRequesterLogic)";
        startRefreshing: "start refreshing (src.lib.logics.deviceFlowRequesterLogic)";
        stopRefreshing: "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)";
        setRefreshInterval: "set refresh interval (src.lib.logics.deviceFlowRequesterLogic)";
        sendMessage: "send message (src.lib.logics.deviceFlowRequesterLogic)";
        sendMessageToAll: "send message to all (src.lib.logics.deviceFlowRequesterLogic)";
        requestUnlock: "request unlock (src.lib.logics.deviceFlowRequesterLogic)";
        setUnlockRequestPrivateKey: "set unlock request private key (src.lib.logics.deviceFlowRequesterLogic)";
        setUnlockRequestPin: "set unlock request pin (src.lib.logics.deviceFlowRequesterLogic)";
        openMessageStream: "open message stream (src.lib.logics.deviceFlowRequesterLogic)";
        closeMessageStream: "close message stream (src.lib.logics.deviceFlowRequesterLogic)";
        setMessageConnection: "set message connection (src.lib.logics.deviceFlowRequesterLogic)";
        handleMessage: "handle message (src.lib.logics.deviceFlowRequesterLogic)";
        clearReceivedMessage: "clear received message (src.lib.logics.deviceFlowRequesterLogic)";
        startRequester: "start requester (src.lib.logics.deviceFlowRequesterLogic)";
        stopRequester: "stop requester (src.lib.logics.deviceFlowRequesterLogic)";
        loadDevicesSuccess: "load devices success (src.lib.logics.deviceFlowRequesterLogic)";
        loadDevicesFailure: "load devices failure (src.lib.logics.deviceFlowRequesterLogic)";
    };
    actions: {
        setPassphrase: (passphrase: string) => void;
        decryptPrivateKey: () => void;
        loadDevices: () => void;
        startRefreshing: () => void;
        stopRefreshing: () => void;
        setRefreshInterval: (intervalId: any) => void;
        sendMessage: (deviceId: string, message: any) => void;
        sendMessageToAll: (message: any) => void;
        requestUnlock: () => void;
        setUnlockRequestPrivateKey: (privateKey: string | null) => void;
        setUnlockRequestPin: (pin: string | null) => void;
        openMessageStream: () => void;
        closeMessageStream: () => void;
        setMessageConnection: (connection: EventSourceWrapper | null) => void;
        handleMessage: (message: any) => void;
        clearReceivedMessage: () => void;
        startRequester: () => void;
        stopRequester: () => void;
        loadDevicesSuccess: (devices: Device[], payload?: {
            value: true;
        }) => void;
        loadDevicesFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        setPassphrase: (passphrase: string) => Promise<any>;
        decryptPrivateKey: () => Promise<any>;
        loadDevices: () => Promise<any>;
        startRefreshing: () => Promise<any>;
        stopRefreshing: () => Promise<any>;
        setRefreshInterval: (intervalId: any) => Promise<any>;
        sendMessage: (deviceId: string, message: any) => Promise<any>;
        sendMessageToAll: (message: any) => Promise<any>;
        requestUnlock: () => Promise<any>;
        setUnlockRequestPrivateKey: (privateKey: string | null) => Promise<any>;
        setUnlockRequestPin: (pin: string | null) => Promise<any>;
        openMessageStream: () => Promise<any>;
        closeMessageStream: () => Promise<any>;
        setMessageConnection: (connection: EventSourceWrapper | null) => Promise<any>;
        handleMessage: (message: any) => Promise<any>;
        clearReceivedMessage: () => Promise<any>;
        startRequester: () => Promise<any>;
        stopRequester: () => Promise<any>;
        loadDevicesSuccess: (devices: Device[], payload?: {
            value: true;
        }) => Promise<any>;
        loadDevicesFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        refreshInterval: any;
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        devices: Device[];
        devicesLoading: boolean;
    };
    events: {
        beforeUnmount: () => void;
    };
    key: undefined;
    listeners: {
        "startRefreshing": ((action: {
            type: "start refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "stopRefreshing": ((action: {
            type: "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "sendMessage": ((action: {
            type: "send message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
                message: any;
            };
        }, previousState: any) => void | Promise<void>)[];
        "sendMessageToAll": ((action: {
            type: "send message to all (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        }, previousState: any) => void | Promise<void>)[];
        "requestUnlock": ((action: {
            type: "request unlock (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "openMessageStream": ((action: {
            type: "open message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "closeMessageStream": ((action: {
            type: "close message stream (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "startRequester": ((action: {
            type: "start requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "stopRequester": ((action: {
            type: "stop requester (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "handleMessage": ((action: {
            type: "handle message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "deviceFlowRequesterLogic"
    ];
    pathString: "src.lib.logics.deviceFlowRequesterLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        refreshInterval: any;
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        devices: Device[];
        devicesLoading: boolean;
    };
    reducers: {
        refreshInterval: (state: any, action: any, fullState: any) => any;
        unlockRequestPrivateKey: (state: string | null, action: any, fullState: any) => string | null;
        unlockRequestPin: (state: string | null, action: any, fullState: any) => string | null;
        messageConnection: (state: EventSourceWrapper | null, action: any, fullState: any) => EventSourceWrapper | null;
        receivedMessage: (state: any, action: any, fullState: any) => any;
        devices: (state: Device[], action: any, fullState: any) => Device[];
        devicesLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        refreshInterval: any;
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        devices: Device[];
        devicesLoading: boolean;
    };
    selectors: {
        refreshInterval: (state: any, props?: any) => any;
        unlockRequestPrivateKey: (state: any, props?: any) => string | null;
        unlockRequestPin: (state: any, props?: any) => string | null;
        messageConnection: (state: any, props?: any) => EventSourceWrapper | null;
        receivedMessage: (state: any, props?: any) => any;
        devices: (state: any, props?: any) => Device[];
        devicesLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        refreshInterval: any;
        unlockRequestPrivateKey: string | null;
        unlockRequestPin: string | null;
        messageConnection: EventSourceWrapper | null;
        receivedMessage: any;
        devices: Device[];
        devicesLoading: boolean;
        jwtToken: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}