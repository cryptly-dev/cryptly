// Generated by kea-typegen on Sat, 18 Oct 2025 12:18:54 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { NodeJS, Timeout } from 'node/timers'
import type { Device } from '../api/device-flow.api'

export interface deviceFlowRequesterLogicType extends Logic {
    actionCreators: {
        loadDevices: () => ({
            type: "load devices (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        startRefreshing: () => ({
            type: "start refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        stopRefreshing: () => ({
            type: "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        });
        setRefreshInterval: (intervalId: NodeJS.Timeout | null) => ({
            type: "set refresh interval (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                intervalId: Timeout | null;
            };
        });
        sendMessage: (deviceId: string, message: any) => ({
            type: "send message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
                message: any;
            };
        });
        sendMessageToAll: (message: any) => ({
            type: "send message to all (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        });
        loadDevicesSuccess: (devices: Device[], payload?: {
            value: true;
        }) => ({
            type: "load devices success (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                devices: Device[];
                payload?: {
                    value: true;
                };
            };
        });
        loadDevicesFailure: (error: string, errorObject?: any) => ({
            type: "load devices failure (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load devices (src.lib.logics.deviceFlowRequesterLogic)": "loadDevices";
        "start refreshing (src.lib.logics.deviceFlowRequesterLogic)": "startRefreshing";
        "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)": "stopRefreshing";
        "set refresh interval (src.lib.logics.deviceFlowRequesterLogic)": "setRefreshInterval";
        "send message (src.lib.logics.deviceFlowRequesterLogic)": "sendMessage";
        "send message to all (src.lib.logics.deviceFlowRequesterLogic)": "sendMessageToAll";
        "load devices success (src.lib.logics.deviceFlowRequesterLogic)": "loadDevicesSuccess";
        "load devices failure (src.lib.logics.deviceFlowRequesterLogic)": "loadDevicesFailure";
    };
    actionTypes: {
        loadDevices: "load devices (src.lib.logics.deviceFlowRequesterLogic)";
        startRefreshing: "start refreshing (src.lib.logics.deviceFlowRequesterLogic)";
        stopRefreshing: "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)";
        setRefreshInterval: "set refresh interval (src.lib.logics.deviceFlowRequesterLogic)";
        sendMessage: "send message (src.lib.logics.deviceFlowRequesterLogic)";
        sendMessageToAll: "send message to all (src.lib.logics.deviceFlowRequesterLogic)";
        loadDevicesSuccess: "load devices success (src.lib.logics.deviceFlowRequesterLogic)";
        loadDevicesFailure: "load devices failure (src.lib.logics.deviceFlowRequesterLogic)";
    };
    actions: {
        loadDevices: () => void;
        startRefreshing: () => void;
        stopRefreshing: () => void;
        setRefreshInterval: (intervalId: NodeJS.Timeout | null) => void;
        sendMessage: (deviceId: string, message: any) => void;
        sendMessageToAll: (message: any) => void;
        loadDevicesSuccess: (devices: Device[], payload?: {
            value: true;
        }) => void;
        loadDevicesFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadDevices: () => Promise<any>;
        startRefreshing: () => Promise<any>;
        stopRefreshing: () => Promise<any>;
        setRefreshInterval: (intervalId: NodeJS.Timeout | null) => Promise<any>;
        sendMessage: (deviceId: string, message: any) => Promise<any>;
        sendMessageToAll: (message: any) => Promise<any>;
        loadDevicesSuccess: (devices: Device[], payload?: {
            value: true;
        }) => Promise<any>;
        loadDevicesFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        refreshInterval: NodeJS.Timeout | null;
        devices: Device[];
        devicesLoading: boolean;
    };
    events: {
        afterMount: () => void;
        beforeUnmount: () => void;
    };
    key: undefined;
    listeners: {
        "startRefreshing": ((action: {
            type: "start refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "stopRefreshing": ((action: {
            type: "stop refreshing (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "sendMessage": ((action: {
            type: "send message (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                deviceId: string;
                message: any;
            };
        }, previousState: any) => void | Promise<void>)[];
        "sendMessageToAll": ((action: {
            type: "send message to all (src.lib.logics.deviceFlowRequesterLogic)";
            payload: {
                message: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "deviceFlowRequesterLogic"
    ];
    pathString: "src.lib.logics.deviceFlowRequesterLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        refreshInterval: NodeJS.Timeout | null;
        devices: Device[];
        devicesLoading: boolean;
    };
    reducers: {
        refreshInterval: (state: NodeJS.Timeout | null, action: any, fullState: any) => NodeJS.Timeout | null;
        devices: (state: Device[], action: any, fullState: any) => Device[];
        devicesLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        refreshInterval: NodeJS.Timeout | null;
        devices: Device[];
        devicesLoading: boolean;
    };
    selectors: {
        refreshInterval: (state: any, props?: any) => NodeJS.Timeout | null;
        devices: (state: any, props?: any) => Device[];
        devicesLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        refreshInterval: NodeJS.Timeout | null;
        devices: Device[];
        devicesLoading: boolean;
        jwtToken: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}