// Generated by kea-typegen on Fri, 19 Sep 2025 08:49:01 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { DecryptedProject, ProjectLogicProps } from './projectLogic'
import type { User } from '../api/user.api'
import type { Project } from '../api/projects.api'

export interface projectLogicType extends Logic {
    actionCreators: {
        updateProjectContent: (content: string) => ({
            type: "update project content (src.lib.logics.projectLogic)";
            payload: {
                content: string;
            };
        });
        toggleHistoryView: () => ({
            type: "toggle history view (src.lib.logics.projectLogic)";
            payload: {
                value: true;
            };
        });
        selectHistoryChange: (changeId: string | null, patch: string | null) => ({
            type: "select history change (src.lib.logics.projectLogic)";
            payload: {
                changeId: string | null;
                patch: string | null;
            };
        });
        setPatches: (patches: string[]) => ({
            type: "set patches (src.lib.logics.projectLogic)";
            payload: {
                patches: string[];
            };
        });
        computePatches: (versions: string[]) => ({
            type: "compute patches (src.lib.logics.projectLogic)";
            payload: {
                versions: string[];
            };
        });
        loadProjectData: () => ({
            type: "load project data (src.lib.logics.projectLogic)";
            payload: any;
        });
        loadProjectDataSuccess: (projectData: {
            content: string;
            id: string;
            name: string;
            passphraseAsKey: string;
        }, payload?: any) => ({
            type: "load project data success (src.lib.logics.projectLogic)";
            payload: {
                projectData: {
                    content: string;
                    id: string;
                    name: string;
                    passphraseAsKey: string;
                };
                payload?: any;
            };
        });
        loadProjectDataFailure: (error: string, errorObject?: any) => ({
            type: "load project data failure (src.lib.logics.projectLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        loadProjectVersions: () => ({
            type: "load project versions (src.lib.logics.projectLogic)";
            payload: any;
        });
        loadProjectVersionsSuccess: (projectVersions: string[], payload?: any) => ({
            type: "load project versions success (src.lib.logics.projectLogic)";
            payload: {
                projectVersions: string[];
                payload?: any;
            };
        });
        loadProjectVersionsFailure: (error: string, errorObject?: any) => ({
            type: "load project versions failure (src.lib.logics.projectLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "update project content (src.lib.logics.projectLogic)": "updateProjectContent";
        "toggle history view (src.lib.logics.projectLogic)": "toggleHistoryView";
        "select history change (src.lib.logics.projectLogic)": "selectHistoryChange";
        "set patches (src.lib.logics.projectLogic)": "setPatches";
        "compute patches (src.lib.logics.projectLogic)": "computePatches";
        "load project data (src.lib.logics.projectLogic)": "loadProjectData";
        "load project data success (src.lib.logics.projectLogic)": "loadProjectDataSuccess";
        "load project data failure (src.lib.logics.projectLogic)": "loadProjectDataFailure";
        "load project versions (src.lib.logics.projectLogic)": "loadProjectVersions";
        "load project versions success (src.lib.logics.projectLogic)": "loadProjectVersionsSuccess";
        "load project versions failure (src.lib.logics.projectLogic)": "loadProjectVersionsFailure";
    };
    actionTypes: {
        updateProjectContent: "update project content (src.lib.logics.projectLogic)";
        toggleHistoryView: "toggle history view (src.lib.logics.projectLogic)";
        selectHistoryChange: "select history change (src.lib.logics.projectLogic)";
        setPatches: "set patches (src.lib.logics.projectLogic)";
        computePatches: "compute patches (src.lib.logics.projectLogic)";
        loadProjectData: "load project data (src.lib.logics.projectLogic)";
        loadProjectDataSuccess: "load project data success (src.lib.logics.projectLogic)";
        loadProjectDataFailure: "load project data failure (src.lib.logics.projectLogic)";
        loadProjectVersions: "load project versions (src.lib.logics.projectLogic)";
        loadProjectVersionsSuccess: "load project versions success (src.lib.logics.projectLogic)";
        loadProjectVersionsFailure: "load project versions failure (src.lib.logics.projectLogic)";
    };
    actions: {
        updateProjectContent: (content: string) => void;
        toggleHistoryView: () => void;
        selectHistoryChange: (changeId: string | null, patch: string | null) => void;
        setPatches: (patches: string[]) => void;
        computePatches: (versions: string[]) => void;
        loadProjectData: () => void;
        loadProjectDataSuccess: (projectData: {
            content: string;
            id: string;
            name: string;
            passphraseAsKey: string;
        }, payload?: any) => void;
        loadProjectDataFailure: (error: string, errorObject?: any) => void;
        loadProjectVersions: () => void;
        loadProjectVersionsSuccess: (projectVersions: string[], payload?: any) => void;
        loadProjectVersionsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        updateProjectContent: (content: string) => Promise<any>;
        toggleHistoryView: () => Promise<any>;
        selectHistoryChange: (changeId: string | null, patch: string | null) => Promise<any>;
        setPatches: (patches: string[]) => Promise<any>;
        computePatches: (versions: string[]) => Promise<any>;
        loadProjectData: () => Promise<any>;
        loadProjectDataSuccess: (projectData: {
            content: string;
            id: string;
            name: string;
            passphraseAsKey: string;
        }, payload?: any) => Promise<any>;
        loadProjectDataFailure: (error: string, errorObject?: any) => Promise<any>;
        loadProjectVersions: () => Promise<any>;
        loadProjectVersionsSuccess: (projectVersions: string[], payload?: any) => Promise<any>;
        loadProjectVersionsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        selectedHistoryChangeId: string | null;
        selectedHistoryPatch: string | null;
        patches: string[];
        projectData: DecryptedProject | null;
        projectDataLoading: boolean;
        projectVersions: string[];
        projectVersionsLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "updateProjectContent": ((action: {
            type: "update project content (src.lib.logics.projectLogic)";
            payload: {
                content: string;
            };
        }, previousState: any) => void | Promise<void>)[];
        "computePatches": ((action: {
            type: "compute patches (src.lib.logics.projectLogic)";
            payload: {
                versions: string[];
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "projectLogic"
    ];
    pathString: "src.lib.logics.projectLogic";
    props: ProjectLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        selectedHistoryChangeId: string | null;
        selectedHistoryPatch: string | null;
        patches: string[];
        projectData: DecryptedProject | null;
        projectDataLoading: boolean;
        projectVersions: string[];
        projectVersionsLoading: boolean;
    };
    reducers: {
        selectedHistoryChangeId: (state: string | null, action: any, fullState: any) => string | null;
        selectedHistoryPatch: (state: string | null, action: any, fullState: any) => string | null;
        patches: (state: string[], action: any, fullState: any) => string[];
        projectData: (state: DecryptedProject | null, action: any, fullState: any) => DecryptedProject | null;
        projectDataLoading: (state: boolean, action: any, fullState: any) => boolean;
        projectVersions: (state: string[], action: any, fullState: any) => string[];
        projectVersionsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        selectedHistoryChangeId: string | null;
        selectedHistoryPatch: string | null;
        patches: string[];
        projectData: DecryptedProject | null;
        projectDataLoading: boolean;
        projectVersions: string[];
        projectVersionsLoading: boolean;
    };
    selectors: {
        selectedHistoryChangeId: (state: any, props?: any) => string | null;
        selectedHistoryPatch: (state: any, props?: any) => string | null;
        patches: (state: any, props?: any) => string[];
        projectData: (state: any, props?: any) => DecryptedProject | null;
        projectDataLoading: (state: any, props?: any) => boolean;
        projectVersions: (state: any, props?: any) => string[];
        projectVersionsLoading: (state: any, props?: any) => boolean;
        privateKeyDecrypted: (state: any, props?: any) => string | null;
        userData: (state: any, props?: any) => User | null;
        jwtToken: (state: any, props?: any) => string | null;
        projects: (state: any, props?: any) => Project[];
        isShowingHistory: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        selectedHistoryChangeId: string | null;
        selectedHistoryPatch: string | null;
        patches: string[];
        projectData: DecryptedProject | null;
        projectDataLoading: boolean;
        projectVersions: string[];
        projectVersionsLoading: boolean;
        privateKeyDecrypted: string | null;
        userData: User | null;
        jwtToken: string | null;
        projects: Project[];
        isShowingHistory: boolean;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        isShowingHistory: (selectedHistoryChangeId: string | null) => boolean;
    };
}