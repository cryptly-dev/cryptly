// Generated by kea-typegen on Fri, 26 Sep 2025 15:33:52 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ProjectTileLogicProps } from './projectLogic'
import type { DecryptedProject, Patch } from './projectDataLogic'
import type { User } from '../api/user.api'
import type { Project, ProjectMember, ProjectMemberRole } from '../api/projects.api'

export interface projectTileLogicType extends Logic {
    actionCreators: {
        loadProjectData: () => ({
            type: "load project data (src.lib.logics.projectTileLogic)";
            payload: any;
        });
        updateProjectContent: () => ({
            type: "update project content (src.lib.logics.projectTileLogic)";
            payload: {
                value: true;
            };
        });
        toggleHistoryView: () => ({
            type: "toggle history view (src.lib.logics.projectTileLogic)";
            payload: {
                value: true;
            };
        });
        setIsShowingHistory: (isShowingHistory: boolean) => ({
            type: "set is showing history (src.lib.logics.projectTileLogic)";
            payload: {
                isShowingHistory: boolean;
            };
        });
        selectHistoryChange: (changeId: string | null, patch: string | null) => ({
            type: "select history change (src.lib.logics.projectTileLogic)";
            payload: {
                changeId: string | null;
                patch: string | null;
            };
        });
        setInputValue: (content: string) => ({
            type: "set input value (src.lib.logics.projectTileLogic)";
            payload: {
                content: string;
            };
        });
        setIsSubmitting: (isSubmitting: boolean) => ({
            type: "set is submitting (src.lib.logics.projectTileLogic)";
            payload: {
                isSubmitting: boolean;
            };
        });
    };
    actionKeys: {
        "load project data (src.lib.logics.projectTileLogic)": "loadProjectData";
        "update project content (src.lib.logics.projectTileLogic)": "updateProjectContent";
        "toggle history view (src.lib.logics.projectTileLogic)": "toggleHistoryView";
        "set is showing history (src.lib.logics.projectTileLogic)": "setIsShowingHistory";
        "select history change (src.lib.logics.projectTileLogic)": "selectHistoryChange";
        "set input value (src.lib.logics.projectTileLogic)": "setInputValue";
        "set is submitting (src.lib.logics.projectTileLogic)": "setIsSubmitting";
    };
    actionTypes: {
        loadProjectData: "load project data (src.lib.logics.projectTileLogic)";
        updateProjectContent: "update project content (src.lib.logics.projectTileLogic)";
        toggleHistoryView: "toggle history view (src.lib.logics.projectTileLogic)";
        setIsShowingHistory: "set is showing history (src.lib.logics.projectTileLogic)";
        selectHistoryChange: "select history change (src.lib.logics.projectTileLogic)";
        setInputValue: "set input value (src.lib.logics.projectTileLogic)";
        setIsSubmitting: "set is submitting (src.lib.logics.projectTileLogic)";
    };
    actions: {
        loadProjectData: () => void;
        updateProjectContent: () => void;
        toggleHistoryView: () => void;
        setIsShowingHistory: (isShowingHistory: boolean) => void;
        selectHistoryChange: (changeId: string | null, patch: string | null) => void;
        setInputValue: (content: string) => void;
        setIsSubmitting: (isSubmitting: boolean) => void;
    };
    asyncActions: {
        loadProjectData: () => Promise<any>;
        updateProjectContent: () => Promise<any>;
        toggleHistoryView: () => Promise<any>;
        setIsShowingHistory: (isShowingHistory: boolean) => Promise<any>;
        selectHistoryChange: (changeId: string | null, patch: string | null) => Promise<any>;
        setInputValue: (content: string) => Promise<any>;
        setIsSubmitting: (isSubmitting: boolean) => Promise<any>;
    };
    defaults: {
        selectedHistoryChangeId: string | null;
        inputValue: string;
        isSubmitting: boolean;
        isShowingHistory: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "updateProjectContent": ((action: {
            type: "update project content (src.lib.logics.projectTileLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "projectTileLogic"
    ];
    pathString: "src.lib.logics.projectTileLogic";
    props: ProjectTileLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        selectedHistoryChangeId: string | null;
        inputValue: string;
        isSubmitting: boolean;
        isShowingHistory: boolean;
    };
    reducers: {
        selectedHistoryChangeId: (state: string | null, action: any, fullState: any) => string | null;
        inputValue: (state: string, action: any, fullState: any) => string;
        isSubmitting: (state: boolean, action: any, fullState: any) => boolean;
        isShowingHistory: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        selectedHistoryChangeId: string | null;
        inputValue: string;
        isSubmitting: boolean;
        isShowingHistory: boolean;
    };
    selectors: {
        selectedHistoryChangeId: (state: any, props?: any) => string | null;
        inputValue: (state: any, props?: any) => string;
        isSubmitting: (state: any, props?: any) => boolean;
        isShowingHistory: (state: any, props?: any) => boolean;
        patches: (state: any, props?: any) => Patch[];
        projectData: (state: any, props?: any) => DecryptedProject | null;
        projectDataLoading: (state: any, props?: any) => boolean;
        privateKeyDecrypted: (state: any, props?: any) => string | null;
        userData: (state: any, props?: any) => User | null;
        jwtToken: (state: any, props?: any) => string | null;
        projects: (state: any, props?: any) => Project[];
        isEditorDirty: (state: any, props?: any) => boolean;
        lastEditAuthor: (state: any, props?: any) => ProjectMember;
        currentUserRole: (state: any, props?: any) => ProjectMemberRole | undefined;
    };
    sharedListeners: {};
    values: {
        selectedHistoryChangeId: string | null;
        inputValue: string;
        isSubmitting: boolean;
        isShowingHistory: boolean;
        patches: Patch[];
        projectData: DecryptedProject | null;
        projectDataLoading: boolean;
        privateKeyDecrypted: string | null;
        userData: User | null;
        jwtToken: string | null;
        projects: Project[];
        isEditorDirty: boolean;
        lastEditAuthor: ProjectMember;
        currentUserRole: ProjectMemberRole | undefined;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        isEditorDirty: (inputValue: string, projectData: null | import("/Users/ablaszkiewicz/Documents/repos/secretlify/frontend/src/lib/logics/projectDataLogic").DecryptedProject, projectDataLoading: boolean) => boolean;
        lastEditAuthor: (patches: import("/Users/ablaszkiewicz/Documents/repos/secretlify/frontend/src/lib/logics/projectDataLogic").Patch[]) => ProjectMember;
        currentUserRole: (projectData: null | import("/Users/ablaszkiewicz/Documents/repos/secretlify/frontend/src/lib/logics/projectDataLogic").DecryptedProject) => ProjectMemberRole | undefined;
    };
}