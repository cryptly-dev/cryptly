// Generated by kea-typegen on Thu, 25 Sep 2025 17:05:24 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IntegrationsLogicProps } from './integrationsLogic'
import type { DecryptedProject } from './projectLogic'

export interface integrationsLogicType extends Logic {
    actionCreators: {
        loadProjectData: () => ({
            type: "load project data (src.lib.logics.integrationsLogic)";
            payload: any;
        });
        addIntegrationToProject: (githubInstallationId: number) => ({
            type: "add integration to project (src.lib.logics.integrationsLogic)";
            payload: {
                githubInstallationId: number;
            };
        });
    };
    actionKeys: {
        "load project data (src.lib.logics.integrationsLogic)": "loadProjectData";
        "add integration to project (src.lib.logics.integrationsLogic)": "addIntegrationToProject";
    };
    actionTypes: {
        loadProjectData: "load project data (src.lib.logics.integrationsLogic)";
        addIntegrationToProject: "add integration to project (src.lib.logics.integrationsLogic)";
    };
    actions: {
        loadProjectData: () => void;
        addIntegrationToProject: (githubInstallationId: number) => void;
    };
    asyncActions: {
        loadProjectData: () => Promise<any>;
        addIntegrationToProject: (githubInstallationId: number) => Promise<any>;
    };
    defaults: {};
    events: {};
    key: string;
    listeners: {
        "addIntegrationToProject": ((action: {
            type: "add integration to project (src.lib.logics.integrationsLogic)";
            payload: {
                githubInstallationId: number;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "integrationsLogic"
    ];
    pathString: "src.lib.logics.integrationsLogic";
    props: IntegrationsLogicProps;
    reducer: (state: any, action: any, fullState: any) => {};
    reducers: {};
    selector: (state: any) => {};
    selectors: {
        jwtToken: (state: any, props?: any) => string | null;
        projectData: (state: any, props?: any) => DecryptedProject | null;
        githubInstallationId: (state: any, props?: any) => number;
    };
    sharedListeners: {};
    values: {
        jwtToken: string | null;
        projectData: DecryptedProject | null;
        githubInstallationId: number;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        githubInstallationId: (projectData: DecryptedProject | null) => number;
    };
}