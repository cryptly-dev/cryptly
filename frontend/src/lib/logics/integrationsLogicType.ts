// Generated by kea-typegen on Thu, 25 Sep 2025 17:58:03 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { IntegrationsLogicProps } from './integrationsLogic'
import type { DecryptedProject } from './projectLogic'
import type { Repository } from '../api/integrations.api'

export interface integrationsLogicType extends Logic {
    actionCreators: {
        loadProjectData: () => ({
            type: "load project data (src.lib.logics.integrationsLogic)";
            payload: any;
        });
        removeIntegrationFromProject: () => ({
            type: "remove integration from project (src.lib.logics.integrationsLogic)";
            payload: {
                value: true;
            };
        });
        loadRepositories: () => ({
            type: "load repositories (src.lib.logics.integrationsLogic)";
            payload: {
                value: true;
            };
        });
        loadRepositoriesSuccess: (repositories: Repository[], payload?: {
            value: true;
        }) => ({
            type: "load repositories success (src.lib.logics.integrationsLogic)";
            payload: {
                repositories: Repository[];
                payload?: {
                    value: true;
                };
            };
        });
        loadRepositoriesFailure: (error: string, errorObject?: any) => ({
            type: "load repositories failure (src.lib.logics.integrationsLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load project data (src.lib.logics.integrationsLogic)": "loadProjectData";
        "remove integration from project (src.lib.logics.integrationsLogic)": "removeIntegrationFromProject";
        "load repositories (src.lib.logics.integrationsLogic)": "loadRepositories";
        "load repositories success (src.lib.logics.integrationsLogic)": "loadRepositoriesSuccess";
        "load repositories failure (src.lib.logics.integrationsLogic)": "loadRepositoriesFailure";
    };
    actionTypes: {
        loadProjectData: "load project data (src.lib.logics.integrationsLogic)";
        removeIntegrationFromProject: "remove integration from project (src.lib.logics.integrationsLogic)";
        loadRepositories: "load repositories (src.lib.logics.integrationsLogic)";
        loadRepositoriesSuccess: "load repositories success (src.lib.logics.integrationsLogic)";
        loadRepositoriesFailure: "load repositories failure (src.lib.logics.integrationsLogic)";
    };
    actions: {
        loadProjectData: () => void;
        removeIntegrationFromProject: () => void;
        loadRepositories: () => void;
        loadRepositoriesSuccess: (repositories: Repository[], payload?: {
            value: true;
        }) => void;
        loadRepositoriesFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadProjectData: () => Promise<any>;
        removeIntegrationFromProject: () => Promise<any>;
        loadRepositories: () => Promise<any>;
        loadRepositoriesSuccess: (repositories: Repository[], payload?: {
            value: true;
        }) => Promise<any>;
        loadRepositoriesFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        repositories: Repository[];
        repositoriesLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "removeIntegrationFromProject": ((action: {
            type: "remove integration from project (src.lib.logics.integrationsLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "integrationsLogic"
    ];
    pathString: "src.lib.logics.integrationsLogic";
    props: IntegrationsLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        repositories: Repository[];
        repositoriesLoading: boolean;
    };
    reducers: {
        repositories: (state: Repository[], action: any, fullState: any) => Repository[];
        repositoriesLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        repositories: Repository[];
        repositoriesLoading: boolean;
    };
    selectors: {
        repositories: (state: any, props?: any) => Repository[];
        repositoriesLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
        projectData: (state: any, props?: any) => DecryptedProject | null;
        githubInstallationId: (state: any, props?: any) => number;
    };
    sharedListeners: {};
    values: {
        repositories: Repository[];
        repositoriesLoading: boolean;
        jwtToken: string | null;
        projectData: DecryptedProject | null;
        githubInstallationId: number;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        githubInstallationId: (projectData: DecryptedProject | null) => number;
    };
}