// Generated by kea-typegen on Sun, 14 Sep 2025 12:45:42 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { KeyPair } from '../crypto/crypto.asymmetric'

export interface keyLogicType extends Logic {
    actionCreators: {
        setPassphrase: (passphrase: string) => ({
            type: "set passphrase (src.lib.logics.keyLogic)";
            payload: {
                passphrase: string;
            };
        });
        reset: () => ({
            type: "reset (src.lib.logics.keyLogic)";
            payload: {
                value: true;
            };
        });
        generateKeyPair: () => ({
            type: "generate key pair (src.lib.logics.keyLogic)";
            payload: any;
        });
        generateKeyPairSuccess: (keyPair: KeyPair, payload?: any) => ({
            type: "generate key pair success (src.lib.logics.keyLogic)";
            payload: {
                keyPair: KeyPair;
                payload?: any;
            };
        });
        generateKeyPairFailure: (error: string, errorObject?: any) => ({
            type: "generate key pair failure (src.lib.logics.keyLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        encryptPrivateKey: (passphrase: string) => ({
            type: "encrypt private key (src.lib.logics.keyLogic)";
            payload: string;
        });
        encryptPrivateKeySuccess: (encryptedPrivateKey: string, payload?: string) => ({
            type: "encrypt private key success (src.lib.logics.keyLogic)";
            payload: {
                encryptedPrivateKey: string;
                payload?: string;
            };
        });
        encryptPrivateKeyFailure: (error: string, errorObject?: any) => ({
            type: "encrypt private key failure (src.lib.logics.keyLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "set passphrase (src.lib.logics.keyLogic)": "setPassphrase";
        "reset (src.lib.logics.keyLogic)": "reset";
        "generate key pair (src.lib.logics.keyLogic)": "generateKeyPair";
        "generate key pair success (src.lib.logics.keyLogic)": "generateKeyPairSuccess";
        "generate key pair failure (src.lib.logics.keyLogic)": "generateKeyPairFailure";
        "encrypt private key (src.lib.logics.keyLogic)": "encryptPrivateKey";
        "encrypt private key success (src.lib.logics.keyLogic)": "encryptPrivateKeySuccess";
        "encrypt private key failure (src.lib.logics.keyLogic)": "encryptPrivateKeyFailure";
    };
    actionTypes: {
        setPassphrase: "set passphrase (src.lib.logics.keyLogic)";
        reset: "reset (src.lib.logics.keyLogic)";
        generateKeyPair: "generate key pair (src.lib.logics.keyLogic)";
        generateKeyPairSuccess: "generate key pair success (src.lib.logics.keyLogic)";
        generateKeyPairFailure: "generate key pair failure (src.lib.logics.keyLogic)";
        encryptPrivateKey: "encrypt private key (src.lib.logics.keyLogic)";
        encryptPrivateKeySuccess: "encrypt private key success (src.lib.logics.keyLogic)";
        encryptPrivateKeyFailure: "encrypt private key failure (src.lib.logics.keyLogic)";
    };
    actions: {
        setPassphrase: (passphrase: string) => void;
        reset: () => void;
        generateKeyPair: () => void;
        generateKeyPairSuccess: (keyPair: KeyPair, payload?: any) => void;
        generateKeyPairFailure: (error: string, errorObject?: any) => void;
        encryptPrivateKey: (passphrase: string) => void;
        encryptPrivateKeySuccess: (encryptedPrivateKey: string, payload?: string) => void;
        encryptPrivateKeyFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        setPassphrase: (passphrase: string) => Promise<any>;
        reset: () => Promise<any>;
        generateKeyPair: () => Promise<any>;
        generateKeyPairSuccess: (keyPair: KeyPair, payload?: any) => Promise<any>;
        generateKeyPairFailure: (error: string, errorObject?: any) => Promise<any>;
        encryptPrivateKey: (passphrase: string) => Promise<any>;
        encryptPrivateKeySuccess: (encryptedPrivateKey: string, payload?: string) => Promise<any>;
        encryptPrivateKeyFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        keyPair: KeyPair | null;
        simulateShouldDoSetup: boolean;
        keyPairLoading: boolean;
        encryptedPrivateKey: any;
        encryptedPrivateKeyLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "src",
        "lib",
        "logics",
        "keyLogic"
    ];
    pathString: "src.lib.logics.keyLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        keyPair: KeyPair | null;
        simulateShouldDoSetup: boolean;
        keyPairLoading: boolean;
        encryptedPrivateKey: any;
        encryptedPrivateKeyLoading: boolean;
    };
    reducers: {
        keyPair: (state: KeyPair | null, action: any, fullState: any) => KeyPair | null;
        simulateShouldDoSetup: (state: boolean, action: any, fullState: any) => boolean;
        keyPairLoading: (state: boolean, action: any, fullState: any) => boolean;
        encryptedPrivateKey: (state: any, action: any, fullState: any) => any;
        encryptedPrivateKeyLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        keyPair: KeyPair | null;
        simulateShouldDoSetup: boolean;
        keyPairLoading: boolean;
        encryptedPrivateKey: any;
        encryptedPrivateKeyLoading: boolean;
    };
    selectors: {
        keyPair: (state: any, props?: any) => KeyPair | null;
        simulateShouldDoSetup: (state: any, props?: any) => boolean;
        keyPairLoading: (state: any, props?: any) => boolean;
        encryptedPrivateKey: (state: any, props?: any) => any;
        encryptedPrivateKeyLoading: (state: any, props?: any) => boolean;
        shouldSetUpPassphrase: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        keyPair: KeyPair | null;
        simulateShouldDoSetup: boolean;
        keyPairLoading: boolean;
        encryptedPrivateKey: any;
        encryptedPrivateKeyLoading: boolean;
        shouldSetUpPassphrase: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        shouldSetUpPassphrase: (simulateShouldDoSetup: boolean) => boolean;
    };
}