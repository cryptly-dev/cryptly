// Generated by kea-typegen on Sun, 14 Sep 2025 13:03:49 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { User } from '../api/user.api'

export interface keyLogicType extends Logic {
    actionCreators: {
        setUserData: (userData: User) => ({
            type: "set user data (src.lib.logics.keyLogic)";
            payload: {
                userData: User;
            };
        });
        setUpPassphrase: (passphrase: string) => ({
            type: "set up passphrase (src.lib.logics.keyLogic)";
            payload: {
                passphrase: string;
            };
        });
        setLocalKeyPair: (keyPair: {
            privateKey: string;
            publicKey: string;
        }) => ({
            type: "set local key pair (src.lib.logics.keyLogic)";
            payload: {
                keyPair: {
                    privateKey: string;
                    publicKey: string;
                };
            };
        });
        setLocalEncryptedPrivateKey: (encryptedPrivateKey: string) => ({
            type: "set local encrypted private key (src.lib.logics.keyLogic)";
            payload: {
                encryptedPrivateKey: string;
            };
        });
    };
    actionKeys: {
        "set user data (src.lib.logics.keyLogic)": "setUserData";
        "set up passphrase (src.lib.logics.keyLogic)": "setUpPassphrase";
        "set local key pair (src.lib.logics.keyLogic)": "setLocalKeyPair";
        "set local encrypted private key (src.lib.logics.keyLogic)": "setLocalEncryptedPrivateKey";
    };
    actionTypes: {
        setUserData: "set user data (src.lib.logics.keyLogic)";
        setUpPassphrase: "set up passphrase (src.lib.logics.keyLogic)";
        setLocalKeyPair: "set local key pair (src.lib.logics.keyLogic)";
        setLocalEncryptedPrivateKey: "set local encrypted private key (src.lib.logics.keyLogic)";
    };
    actions: {
        setUserData: (userData: User) => void;
        setUpPassphrase: (passphrase: string) => void;
        setLocalKeyPair: (keyPair: {
            privateKey: string;
            publicKey: string;
        }) => void;
        setLocalEncryptedPrivateKey: (encryptedPrivateKey: string) => void;
    };
    asyncActions: {
        setUserData: (userData: User) => Promise<any>;
        setUpPassphrase: (passphrase: string) => Promise<any>;
        setLocalKeyPair: (keyPair: {
            privateKey: string;
            publicKey: string;
        }) => Promise<any>;
        setLocalEncryptedPrivateKey: (encryptedPrivateKey: string) => Promise<any>;
    };
    defaults: {
        localKeyPair: {
            privateKey: string;
            publicKey: string;
        } | null;
        localEncryptedPrivateKey: string | null;
    };
    events: {};
    key: undefined;
    listeners: {
        "setUpPassphrase": ((action: {
            type: "set up passphrase (src.lib.logics.keyLogic)";
            payload: {
                passphrase: string;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "keyLogic"
    ];
    pathString: "src.lib.logics.keyLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        localKeyPair: {
            privateKey: string;
            publicKey: string;
        } | null;
        localEncryptedPrivateKey: string | null;
    };
    reducers: {
        localKeyPair: (state: {
            privateKey: string;
            publicKey: string;
        } | null, action: any, fullState: any) => {
            privateKey: string;
            publicKey: string;
        } | null;
        localEncryptedPrivateKey: (state: string | null, action: any, fullState: any) => string | null;
    };
    selector: (state: any) => {
        localKeyPair: {
            privateKey: string;
            publicKey: string;
        } | null;
        localEncryptedPrivateKey: string | null;
    };
    selectors: {
        localKeyPair: (state: any, props?: any) => {
            privateKey: string;
            publicKey: string;
        } | null;
        localEncryptedPrivateKey: (state: any, props?: any) => string | null;
        userData: (state: any, props?: any) => User | null;
        shouldSetUpPassphrase: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        localKeyPair: {
            privateKey: string;
            publicKey: string;
        } | null;
        localEncryptedPrivateKey: string | null;
        userData: User | null;
        shouldSetUpPassphrase: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        shouldSetUpPassphrase: (userData: User | null) => boolean;
    };
}