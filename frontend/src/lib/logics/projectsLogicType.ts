// Generated by kea-typegen on Tue, 16 Sep 2025 16:24:18 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

export interface projectsLogicType extends Logic {
    actionCreators: {
        setActiveProjectId: (projectId: string) => ({
            type: "set active project id (src.lib.logics.projectsLogic)";
            payload: {
                projectId: string;
            };
        });
        addProject: (project: {
            id: string;
            name: string;
        }) => ({
            type: "add project (src.lib.logics.projectsLogic)";
            payload: {
                project: {
                    id: string;
                    name: string;
                };
            };
        });
        readProjectById: (projectId: string) => ({
            type: "read project by id (src.lib.logics.projectsLogic)";
            payload: {
                projectId: string;
            };
        });
    };
    actionKeys: {
        "set active project id (src.lib.logics.projectsLogic)": "setActiveProjectId";
        "add project (src.lib.logics.projectsLogic)": "addProject";
        "read project by id (src.lib.logics.projectsLogic)": "readProjectById";
    };
    actionTypes: {
        setActiveProjectId: "set active project id (src.lib.logics.projectsLogic)";
        addProject: "add project (src.lib.logics.projectsLogic)";
        readProjectById: "read project by id (src.lib.logics.projectsLogic)";
    };
    actions: {
        setActiveProjectId: (projectId: string) => void;
        addProject: (project: {
            id: string;
            name: string;
        }) => void;
        readProjectById: (projectId: string) => void;
    };
    asyncActions: {
        setActiveProjectId: (projectId: string) => Promise<any>;
        addProject: (project: {
            id: string;
            name: string;
        }) => Promise<any>;
        readProjectById: (projectId: string) => Promise<any>;
    };
    defaults: {
        projects: {
            id: string;
            name: string;
        }[];
    };
    events: {};
    key: undefined;
    listeners: {
        "addProject": ((action: {
            type: "add project (src.lib.logics.projectsLogic)";
            payload: {
                project: {
                    id: string;
                    name: string;
                };
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "projectsLogic"
    ];
    pathString: "src.lib.logics.projectsLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        projects: {
            id: string;
            name: string;
        }[];
    };
    reducers: {
        projects: (state: {
            id: string;
            name: string;
        }[], action: any, fullState: any) => {
            id: string;
            name: string;
        }[];
    };
    selector: (state: any) => {
        projects: {
            id: string;
            name: string;
        }[];
    };
    selectors: {
        projects: (state: any, props?: any) => {
            id: string;
            name: string;
        }[];
        jwtToken: (state: any, props?: any) => string | null;
        readProjectById: (state: any, props?: any) => (id: string) => {
            id: string;
            name: string;
        } | undefined;
    };
    sharedListeners: {};
    values: {
        projects: {
            id: string;
            name: string;
        }[];
        jwtToken: string | null;
        readProjectById: (id: string) => {
            id: string;
            name: string;
        } | undefined;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        readProjectById: (projects: {
            id: string;
            name: string;
        }[]) => (id: string) => {
            id: string;
            name: string;
        } | undefined;
    };
}