// Generated by kea-typegen on Fri, 10 Oct 2025 20:25:30 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { FTUXStep } from './ftuxLogic'

export interface ftuxLogicType extends Logic {
    actionCreators: {
        startFTUX: () => ({
            type: "start f t u x (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        nextStep: () => ({
            type: "next step (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        previousStep: () => ({
            type: "previous step (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        skipFTUX: () => ({
            type: "skip f t u x (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        completeFTUX: () => ({
            type: "complete f t u x (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        setCurrentStep: (step: FTUXStep) => ({
            type: "set current step (src.lib.logics.ftuxLogic)";
            payload: {
                step: FTUXStep;
            };
        });
        userMadeEdit: () => ({
            type: "user made edit (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        userSaved: () => ({
            type: "user saved (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
        userOpenedIntegrationsDialog: () => ({
            type: "user opened integrations dialog (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        "start f t u x (src.lib.logics.ftuxLogic)": "startFTUX";
        "next step (src.lib.logics.ftuxLogic)": "nextStep";
        "previous step (src.lib.logics.ftuxLogic)": "previousStep";
        "skip f t u x (src.lib.logics.ftuxLogic)": "skipFTUX";
        "complete f t u x (src.lib.logics.ftuxLogic)": "completeFTUX";
        "set current step (src.lib.logics.ftuxLogic)": "setCurrentStep";
        "user made edit (src.lib.logics.ftuxLogic)": "userMadeEdit";
        "user saved (src.lib.logics.ftuxLogic)": "userSaved";
        "user opened integrations dialog (src.lib.logics.ftuxLogic)": "userOpenedIntegrationsDialog";
    };
    actionTypes: {
        startFTUX: "start f t u x (src.lib.logics.ftuxLogic)";
        nextStep: "next step (src.lib.logics.ftuxLogic)";
        previousStep: "previous step (src.lib.logics.ftuxLogic)";
        skipFTUX: "skip f t u x (src.lib.logics.ftuxLogic)";
        completeFTUX: "complete f t u x (src.lib.logics.ftuxLogic)";
        setCurrentStep: "set current step (src.lib.logics.ftuxLogic)";
        userMadeEdit: "user made edit (src.lib.logics.ftuxLogic)";
        userSaved: "user saved (src.lib.logics.ftuxLogic)";
        userOpenedIntegrationsDialog: "user opened integrations dialog (src.lib.logics.ftuxLogic)";
    };
    actions: {
        startFTUX: () => void;
        nextStep: () => void;
        previousStep: () => void;
        skipFTUX: () => void;
        completeFTUX: () => void;
        setCurrentStep: (step: FTUXStep) => void;
        userMadeEdit: () => void;
        userSaved: () => void;
        userOpenedIntegrationsDialog: () => void;
    };
    asyncActions: {
        startFTUX: () => Promise<any>;
        nextStep: () => Promise<any>;
        previousStep: () => Promise<any>;
        skipFTUX: () => Promise<any>;
        completeFTUX: () => Promise<any>;
        setCurrentStep: (step: FTUXStep) => Promise<any>;
        userMadeEdit: () => Promise<any>;
        userSaved: () => Promise<any>;
        userOpenedIntegrationsDialog: () => Promise<any>;
    };
    defaults: {
        currentStep: FTUXStep;
        isFTUXActive: boolean;
    };
    events: {};
    key: undefined;
    listeners: {
        "startFTUX": ((action: {
            type: "start f t u x (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "userMadeEdit": ((action: {
            type: "user made edit (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "userSaved": ((action: {
            type: "user saved (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "userOpenedIntegrationsDialog": ((action: {
            type: "user opened integrations dialog (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "skipFTUX": ((action: {
            type: "skip f t u x (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "completeFTUX": ((action: {
            type: "complete f t u x (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "nextStep": ((action: {
            type: "next step (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "previousStep": ((action: {
            type: "previous step (src.lib.logics.ftuxLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "ftuxLogic"
    ];
    pathString: "src.lib.logics.ftuxLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        currentStep: FTUXStep;
        isFTUXActive: boolean;
    };
    reducers: {
        currentStep: (state: FTUXStep, action: any, fullState: any) => FTUXStep;
        isFTUXActive: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        currentStep: FTUXStep;
        isFTUXActive: boolean;
    };
    selectors: {
        currentStep: (state: any, props?: any) => FTUXStep;
        isFTUXActive: (state: any, props?: any) => boolean;
        isFTUXCompleted: (state: any, props?: any) => boolean;
        shouldShowEditorTooltip: (state: any, props?: any) => boolean;
        shouldShowSaveTooltip: (state: any, props?: any) => boolean;
        shouldShowIntegrationsTooltip: (state: any, props?: any) => boolean;
        currentStepNumber: (state: any, props?: any) => 0 | 1 | 2 | 3;
    };
    sharedListeners: {};
    values: {
        currentStep: FTUXStep;
        isFTUXActive: boolean;
        isFTUXCompleted: boolean;
        shouldShowEditorTooltip: boolean;
        shouldShowSaveTooltip: boolean;
        shouldShowIntegrationsTooltip: boolean;
        currentStepNumber: 0 | 1 | 2 | 3;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        isFTUXCompleted: (currentStep: FTUXStep) => boolean;
        shouldShowEditorTooltip: (currentStep: FTUXStep, isFTUXActive: boolean) => boolean;
        shouldShowSaveTooltip: (currentStep: FTUXStep, isFTUXActive: boolean) => boolean;
        shouldShowIntegrationsTooltip: (currentStep: FTUXStep, isFTUXActive: boolean) => boolean;
        currentStepNumber: (currentStep: FTUXStep) => 0 | 1 | 2 | 3;
    };
}