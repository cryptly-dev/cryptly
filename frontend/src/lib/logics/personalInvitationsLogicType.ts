// Generated by kea-typegen on Tue, 14 Oct 2025 16:58:42 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonalInvitationsLogicProps } from './personalInvitationsLogic'
import type { DecryptedProject } from './projectLogic'
import type { ProjectMemberRole } from '../api/projects.api'
import type { PersonalInvitation } from '../api/personal-invitations.api'

export interface personalInvitationsLogicType extends Logic {
    actionCreators: {
        createPersonalInvitation: (invitedUserId: string, role: ProjectMemberRole) => ({
            type: "create personal invitation (src.lib.logics.personalInvitationsLogic)";
            payload: {
                invitedUserId: string;
                role: ProjectMemberRole;
            };
        });
        deletePersonalInvitation: (invitationId: string) => ({
            type: "delete personal invitation (src.lib.logics.personalInvitationsLogic)";
            payload: {
                invitationId: string;
            };
        });
        loadPersonalInvitations: () => ({
            type: "load personal invitations (src.lib.logics.personalInvitationsLogic)";
            payload: any;
        });
        loadPersonalInvitationsSuccess: (personalInvitations: PersonalInvitation[], payload?: any) => ({
            type: "load personal invitations success (src.lib.logics.personalInvitationsLogic)";
            payload: {
                personalInvitations: PersonalInvitation[];
                payload?: any;
            };
        });
        loadPersonalInvitationsFailure: (error: string, errorObject?: any) => ({
            type: "load personal invitations failure (src.lib.logics.personalInvitationsLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "create personal invitation (src.lib.logics.personalInvitationsLogic)": "createPersonalInvitation";
        "delete personal invitation (src.lib.logics.personalInvitationsLogic)": "deletePersonalInvitation";
        "load personal invitations (src.lib.logics.personalInvitationsLogic)": "loadPersonalInvitations";
        "load personal invitations success (src.lib.logics.personalInvitationsLogic)": "loadPersonalInvitationsSuccess";
        "load personal invitations failure (src.lib.logics.personalInvitationsLogic)": "loadPersonalInvitationsFailure";
    };
    actionTypes: {
        createPersonalInvitation: "create personal invitation (src.lib.logics.personalInvitationsLogic)";
        deletePersonalInvitation: "delete personal invitation (src.lib.logics.personalInvitationsLogic)";
        loadPersonalInvitations: "load personal invitations (src.lib.logics.personalInvitationsLogic)";
        loadPersonalInvitationsSuccess: "load personal invitations success (src.lib.logics.personalInvitationsLogic)";
        loadPersonalInvitationsFailure: "load personal invitations failure (src.lib.logics.personalInvitationsLogic)";
    };
    actions: {
        createPersonalInvitation: (invitedUserId: string, role: ProjectMemberRole) => void;
        deletePersonalInvitation: (invitationId: string) => void;
        loadPersonalInvitations: () => void;
        loadPersonalInvitationsSuccess: (personalInvitations: PersonalInvitation[], payload?: any) => void;
        loadPersonalInvitationsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        createPersonalInvitation: (invitedUserId: string, role: ProjectMemberRole) => Promise<any>;
        deletePersonalInvitation: (invitationId: string) => Promise<any>;
        loadPersonalInvitations: () => Promise<any>;
        loadPersonalInvitationsSuccess: (personalInvitations: PersonalInvitation[], payload?: any) => Promise<any>;
        loadPersonalInvitationsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        personalInvitations: PersonalInvitation[];
        personalInvitationsLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "createPersonalInvitation": ((action: {
            type: "create personal invitation (src.lib.logics.personalInvitationsLogic)";
            payload: {
                invitedUserId: string;
                role: ProjectMemberRole;
            };
        }, previousState: any) => void | Promise<void>)[];
        "deletePersonalInvitation": ((action: {
            type: "delete personal invitation (src.lib.logics.personalInvitationsLogic)";
            payload: {
                invitationId: string;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "personalInvitationsLogic"
    ];
    pathString: "src.lib.logics.personalInvitationsLogic";
    props: PersonalInvitationsLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        personalInvitations: PersonalInvitation[];
        personalInvitationsLoading: boolean;
    };
    reducers: {
        personalInvitations: (state: PersonalInvitation[], action: any, fullState: any) => PersonalInvitation[];
        personalInvitationsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        personalInvitations: PersonalInvitation[];
        personalInvitationsLoading: boolean;
    };
    selectors: {
        personalInvitations: (state: any, props?: any) => PersonalInvitation[];
        personalInvitationsLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
        projectData: (state: any, props?: any) => DecryptedProject | null;
    };
    sharedListeners: {};
    values: {
        personalInvitations: PersonalInvitation[];
        personalInvitationsLoading: boolean;
        jwtToken: string | null;
        projectData: DecryptedProject | null;
    };
    _isKea: true;
    _isKeaWithKey: true;
}