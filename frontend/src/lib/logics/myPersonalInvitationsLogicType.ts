// Generated by kea-typegen on Tue, 14 Oct 2025 20:19:29 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PersonalInvitation } from '../api/personal-invitations.api'

export interface myPersonalInvitationsLogicType extends Logic {
    actionCreators: {
        loadProjects: () => ({
            type: "load projects (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                value: true;
            };
        });
        acceptPersonalInvitation: (invitationId: string) => ({
            type: "accept personal invitation (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                invitationId: string;
            };
        });
        rejectPersonalInvitation: (invitationId: string) => ({
            type: "reject personal invitation (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                invitationId: string;
            };
        });
        loadMyPersonalInvitations: () => ({
            type: "load my personal invitations (src.lib.logics.myPersonalInvitationsLogic)";
            payload: any;
        });
        loadMyPersonalInvitationsSuccess: (myPersonalInvitations: PersonalInvitation[], payload?: any) => ({
            type: "load my personal invitations success (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                myPersonalInvitations: PersonalInvitation[];
                payload?: any;
            };
        });
        loadMyPersonalInvitationsFailure: (error: string, errorObject?: any) => ({
            type: "load my personal invitations failure (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load projects (src.lib.logics.myPersonalInvitationsLogic)": "loadProjects";
        "accept personal invitation (src.lib.logics.myPersonalInvitationsLogic)": "acceptPersonalInvitation";
        "reject personal invitation (src.lib.logics.myPersonalInvitationsLogic)": "rejectPersonalInvitation";
        "load my personal invitations (src.lib.logics.myPersonalInvitationsLogic)": "loadMyPersonalInvitations";
        "load my personal invitations success (src.lib.logics.myPersonalInvitationsLogic)": "loadMyPersonalInvitationsSuccess";
        "load my personal invitations failure (src.lib.logics.myPersonalInvitationsLogic)": "loadMyPersonalInvitationsFailure";
    };
    actionTypes: {
        loadProjects: "load projects (src.lib.logics.myPersonalInvitationsLogic)";
        acceptPersonalInvitation: "accept personal invitation (src.lib.logics.myPersonalInvitationsLogic)";
        rejectPersonalInvitation: "reject personal invitation (src.lib.logics.myPersonalInvitationsLogic)";
        loadMyPersonalInvitations: "load my personal invitations (src.lib.logics.myPersonalInvitationsLogic)";
        loadMyPersonalInvitationsSuccess: "load my personal invitations success (src.lib.logics.myPersonalInvitationsLogic)";
        loadMyPersonalInvitationsFailure: "load my personal invitations failure (src.lib.logics.myPersonalInvitationsLogic)";
    };
    actions: {
        loadProjects: () => void;
        acceptPersonalInvitation: (invitationId: string) => void;
        rejectPersonalInvitation: (invitationId: string) => void;
        loadMyPersonalInvitations: () => void;
        loadMyPersonalInvitationsSuccess: (myPersonalInvitations: PersonalInvitation[], payload?: any) => void;
        loadMyPersonalInvitationsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadProjects: () => Promise<any>;
        acceptPersonalInvitation: (invitationId: string) => Promise<any>;
        rejectPersonalInvitation: (invitationId: string) => Promise<any>;
        loadMyPersonalInvitations: () => Promise<any>;
        loadMyPersonalInvitationsSuccess: (myPersonalInvitations: PersonalInvitation[], payload?: any) => Promise<any>;
        loadMyPersonalInvitationsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        myPersonalInvitations: PersonalInvitation[];
        myPersonalInvitationsLoading: boolean;
    };
    events: {
        afterMount: () => void;
    };
    key: undefined;
    listeners: {
        "acceptPersonalInvitation": ((action: {
            type: "accept personal invitation (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                invitationId: string;
            };
        }, previousState: any) => void | Promise<void>)[];
        "rejectPersonalInvitation": ((action: {
            type: "reject personal invitation (src.lib.logics.myPersonalInvitationsLogic)";
            payload: {
                invitationId: string;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "lib",
        "logics",
        "myPersonalInvitationsLogic"
    ];
    pathString: "src.lib.logics.myPersonalInvitationsLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        myPersonalInvitations: PersonalInvitation[];
        myPersonalInvitationsLoading: boolean;
    };
    reducers: {
        myPersonalInvitations: (state: PersonalInvitation[], action: any, fullState: any) => PersonalInvitation[];
        myPersonalInvitationsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        myPersonalInvitations: PersonalInvitation[];
        myPersonalInvitationsLoading: boolean;
    };
    selectors: {
        myPersonalInvitations: (state: any, props?: any) => PersonalInvitation[];
        myPersonalInvitationsLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        myPersonalInvitations: PersonalInvitation[];
        myPersonalInvitationsLoading: boolean;
        jwtToken: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
}