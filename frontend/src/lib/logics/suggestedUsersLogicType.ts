// Generated by kea-typegen on Tue, 14 Oct 2025 19:21:55 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SuggestedUsersLogicProps } from './suggestedUsersLogic'
import type { DecryptedProject } from './projectLogic'
import type { SuggestedUser } from '../api/user.api'

export interface suggestedUsersLogicType extends Logic {
    actionCreators: {
        loadSuggestedUsers: () => ({
            type: "load suggested users (src.lib.logics.suggestedUsersLogic)";
            payload: any;
        });
        loadSuggestedUsersSuccess: (suggestedUsers: SuggestedUser[], payload?: any) => ({
            type: "load suggested users success (src.lib.logics.suggestedUsersLogic)";
            payload: {
                suggestedUsers: SuggestedUser[];
                payload?: any;
            };
        });
        loadSuggestedUsersFailure: (error: string, errorObject?: any) => ({
            type: "load suggested users failure (src.lib.logics.suggestedUsersLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load suggested users (src.lib.logics.suggestedUsersLogic)": "loadSuggestedUsers";
        "load suggested users success (src.lib.logics.suggestedUsersLogic)": "loadSuggestedUsersSuccess";
        "load suggested users failure (src.lib.logics.suggestedUsersLogic)": "loadSuggestedUsersFailure";
    };
    actionTypes: {
        loadSuggestedUsers: "load suggested users (src.lib.logics.suggestedUsersLogic)";
        loadSuggestedUsersSuccess: "load suggested users success (src.lib.logics.suggestedUsersLogic)";
        loadSuggestedUsersFailure: "load suggested users failure (src.lib.logics.suggestedUsersLogic)";
    };
    actions: {
        loadSuggestedUsers: () => void;
        loadSuggestedUsersSuccess: (suggestedUsers: SuggestedUser[], payload?: any) => void;
        loadSuggestedUsersFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadSuggestedUsers: () => Promise<any>;
        loadSuggestedUsersSuccess: (suggestedUsers: SuggestedUser[], payload?: any) => Promise<any>;
        loadSuggestedUsersFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        suggestedUsers: SuggestedUser[];
        suggestedUsersLoading: boolean;
    };
    events: {
        afterMount: () => void;
    };
    key: string;
    listeners: {};
    path: [
        "src",
        "lib",
        "logics",
        "suggestedUsersLogic"
    ];
    pathString: "src.lib.logics.suggestedUsersLogic";
    props: SuggestedUsersLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        suggestedUsers: SuggestedUser[];
        suggestedUsersLoading: boolean;
    };
    reducers: {
        suggestedUsers: (state: SuggestedUser[], action: any, fullState: any) => SuggestedUser[];
        suggestedUsersLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        suggestedUsers: SuggestedUser[];
        suggestedUsersLoading: boolean;
    };
    selectors: {
        suggestedUsers: (state: any, props?: any) => SuggestedUser[];
        suggestedUsersLoading: (state: any, props?: any) => boolean;
        jwtToken: (state: any, props?: any) => string | null;
        projectData: (state: any, props?: any) => DecryptedProject | null;
    };
    sharedListeners: {};
    values: {
        suggestedUsers: SuggestedUser[];
        suggestedUsersLoading: boolean;
        jwtToken: string | null;
        projectData: DecryptedProject | null;
    };
    _isKea: true;
    _isKeaWithKey: true;
}