// Generated by kea-typegen on Wed, 15 Oct 2025 20:45:38 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Project } from '../api/projects.api'
import type { User } from '../api/user.api'
import type { SearchResult, Secret } from './searchLogic'

export interface searchLogicType extends Logic {
    actionCreators: {
        loadProjects: () => ({
            type: "load projects (src.lib.logics.searchLogic)";
            payload: {
                value: true;
            };
        });
        setSearchQuery: (query: string) => ({
            type: "set search query (src.lib.logics.searchLogic)";
            payload: {
                query: string;
            };
        });
        loadAllSecrets: () => ({
            type: "load all secrets (src.lib.logics.searchLogic)";
            payload: {
                value: true;
            };
        });
        loadAllSecretsSuccess: (secrets: Secret[], payload?: {
            value: true;
        }) => ({
            type: "load all secrets success (src.lib.logics.searchLogic)";
            payload: {
                secrets: Secret[];
                payload?: {
                    value: true;
                };
            };
        });
        loadAllSecretsFailure: (error: string, errorObject?: any) => ({
            type: "load all secrets failure (src.lib.logics.searchLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load projects (src.lib.logics.searchLogic)": "loadProjects";
        "set search query (src.lib.logics.searchLogic)": "setSearchQuery";
        "load all secrets (src.lib.logics.searchLogic)": "loadAllSecrets";
        "load all secrets success (src.lib.logics.searchLogic)": "loadAllSecretsSuccess";
        "load all secrets failure (src.lib.logics.searchLogic)": "loadAllSecretsFailure";
    };
    actionTypes: {
        loadProjects: "load projects (src.lib.logics.searchLogic)";
        setSearchQuery: "set search query (src.lib.logics.searchLogic)";
        loadAllSecrets: "load all secrets (src.lib.logics.searchLogic)";
        loadAllSecretsSuccess: "load all secrets success (src.lib.logics.searchLogic)";
        loadAllSecretsFailure: "load all secrets failure (src.lib.logics.searchLogic)";
    };
    actions: {
        loadProjects: () => void;
        setSearchQuery: (query: string) => void;
        loadAllSecrets: () => void;
        loadAllSecretsSuccess: (secrets: Secret[], payload?: {
            value: true;
        }) => void;
        loadAllSecretsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadProjects: () => Promise<any>;
        setSearchQuery: (query: string) => Promise<any>;
        loadAllSecrets: () => Promise<any>;
        loadAllSecretsSuccess: (secrets: Secret[], payload?: {
            value: true;
        }) => Promise<any>;
        loadAllSecretsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        searchQuery: string;
        secrets: Secret[];
        secretsLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "src",
        "lib",
        "logics",
        "searchLogic"
    ];
    pathString: "src.lib.logics.searchLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        searchQuery: string;
        secrets: Secret[];
        secretsLoading: boolean;
    };
    reducers: {
        searchQuery: (state: string, action: any, fullState: any) => string;
        secrets: (state: Secret[], action: any, fullState: any) => Secret[];
        secretsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        searchQuery: string;
        secrets: Secret[];
        secretsLoading: boolean;
    };
    selectors: {
        searchQuery: (state: any, props?: any) => string;
        secrets: (state: any, props?: any) => Secret[];
        secretsLoading: (state: any, props?: any) => boolean;
        projects: (state: any, props?: any) => Project[] | undefined;
        privateKeyDecrypted: (state: any, props?: any) => string | null;
        userData: (state: any, props?: any) => User | null;
        jwtToken: (state: any, props?: any) => string | null;
        searchResults: (state: any, props?: any) => SearchResult[];
    };
    sharedListeners: {};
    values: {
        searchQuery: string;
        secrets: Secret[];
        secretsLoading: boolean;
        projects: Project[] | undefined;
        privateKeyDecrypted: string | null;
        userData: User | null;
        jwtToken: string | null;
        searchResults: SearchResult[];
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        searchResults: (searchQuery: string, secrets: Secret[]) => SearchResult[];
    };
}