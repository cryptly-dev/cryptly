// Generated by kea-typegen on Wed, 15 Oct 2025 20:40:27 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { SearchResult } from './searchLogic'

export interface searchLogicType extends Logic {
    actionCreators: {
        setSearchQuery: (query: string) => ({
            type: "set search query (src.lib.logics.searchLogic)";
            payload: {
                query: string;
            };
        });
    };
    actionKeys: {
        "set search query (src.lib.logics.searchLogic)": "setSearchQuery";
    };
    actionTypes: {
        setSearchQuery: "set search query (src.lib.logics.searchLogic)";
    };
    actions: {
        setSearchQuery: (query: string) => void;
    };
    asyncActions: {
        setSearchQuery: (query: string) => Promise<any>;
    };
    defaults: {
        searchQuery: string;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "src",
        "lib",
        "logics",
        "searchLogic"
    ];
    pathString: "src.lib.logics.searchLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        searchQuery: string;
    };
    reducers: {
        searchQuery: (state: string, action: any, fullState: any) => string;
    };
    selector: (state: any) => {
        searchQuery: string;
    };
    selectors: {
        searchQuery: (state: any, props?: any) => string;
        secrets: (state: any, props?: any) => {
            name: string;
            value: string;
        }[];
        searchResults: (state: any, props?: any) => SearchResult[];
    };
    sharedListeners: {};
    values: {
        searchQuery: string;
        secrets: {
            name: string;
            value: string;
        }[];
        searchResults: SearchResult[];
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        searchResults: (searchQuery: string, secrets: {
            name: string;
            value: string;
        }[]) => SearchResult[];
    };
}